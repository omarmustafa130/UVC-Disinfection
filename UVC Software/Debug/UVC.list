
UVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030e0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080031a0  080031a0  000041a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031bc  080031bc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080031bc  080031bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031c4  080031c4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c4  080031c4  000041c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031c8  080031c8  000041c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080031cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080031d8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080031d8  00005080  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ec2  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017e5  00000000  00000000  0000bef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058c  00000000  00000000  0000de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001089b  00000000  00000000  0000e3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a59a  00000000  00000000  0001ec57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062a0e  00000000  00000000  000291f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008bbff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019f0  00000000  00000000  0008bc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0008d634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003188 	.word	0x08003188

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003188 	.word	0x08003188

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 f9c5 	bl	80005b8 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f945 	bl	80004c8 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9b7 	bl	80005b8 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f9ad 	bl	80005b8 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f953 	bl	8000518 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f949 	bl	8000518 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_uldivmod>:
 8000294:	2b00      	cmp	r3, #0
 8000296:	d111      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 8000298:	2a00      	cmp	r2, #0
 800029a:	d10f      	bne.n	80002bc <__aeabi_uldivmod+0x28>
 800029c:	2900      	cmp	r1, #0
 800029e:	d100      	bne.n	80002a2 <__aeabi_uldivmod+0xe>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d002      	beq.n	80002aa <__aeabi_uldivmod+0x16>
 80002a4:	2100      	movs	r1, #0
 80002a6:	43c9      	mvns	r1, r1
 80002a8:	0008      	movs	r0, r1
 80002aa:	b407      	push	{r0, r1, r2}
 80002ac:	4802      	ldr	r0, [pc, #8]	@ (80002b8 <__aeabi_uldivmod+0x24>)
 80002ae:	a102      	add	r1, pc, #8	@ (adr r1, 80002b8 <__aeabi_uldivmod+0x24>)
 80002b0:	1840      	adds	r0, r0, r1
 80002b2:	9002      	str	r0, [sp, #8]
 80002b4:	bd03      	pop	{r0, r1, pc}
 80002b6:	46c0      	nop			@ (mov r8, r8)
 80002b8:	ffffff65 	.word	0xffffff65
 80002bc:	b403      	push	{r0, r1}
 80002be:	4668      	mov	r0, sp
 80002c0:	b501      	push	{r0, lr}
 80002c2:	9802      	ldr	r0, [sp, #8]
 80002c4:	f000 f834 	bl	8000330 <__udivmoddi4>
 80002c8:	9b01      	ldr	r3, [sp, #4]
 80002ca:	469e      	mov	lr, r3
 80002cc:	b002      	add	sp, #8
 80002ce:	bc0c      	pop	{r2, r3}
 80002d0:	4770      	bx	lr
 80002d2:	46c0      	nop			@ (mov r8, r8)

080002d4 <__aeabi_lmul>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	46ce      	mov	lr, r9
 80002d8:	4699      	mov	r9, r3
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	469c      	mov	ip, r3
 80002de:	0413      	lsls	r3, r2, #16
 80002e0:	4647      	mov	r7, r8
 80002e2:	0c1b      	lsrs	r3, r3, #16
 80002e4:	001d      	movs	r5, r3
 80002e6:	000e      	movs	r6, r1
 80002e8:	4661      	mov	r1, ip
 80002ea:	0404      	lsls	r4, r0, #16
 80002ec:	0c24      	lsrs	r4, r4, #16
 80002ee:	b580      	push	{r7, lr}
 80002f0:	0007      	movs	r7, r0
 80002f2:	0c10      	lsrs	r0, r2, #16
 80002f4:	434b      	muls	r3, r1
 80002f6:	4365      	muls	r5, r4
 80002f8:	4341      	muls	r1, r0
 80002fa:	4360      	muls	r0, r4
 80002fc:	0c2c      	lsrs	r4, r5, #16
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	1824      	adds	r4, r4, r0
 8000302:	468c      	mov	ip, r1
 8000304:	42a3      	cmp	r3, r4
 8000306:	d903      	bls.n	8000310 <__aeabi_lmul+0x3c>
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	025b      	lsls	r3, r3, #9
 800030c:	4698      	mov	r8, r3
 800030e:	44c4      	add	ip, r8
 8000310:	4649      	mov	r1, r9
 8000312:	4379      	muls	r1, r7
 8000314:	4356      	muls	r6, r2
 8000316:	0c23      	lsrs	r3, r4, #16
 8000318:	042d      	lsls	r5, r5, #16
 800031a:	0c2d      	lsrs	r5, r5, #16
 800031c:	1989      	adds	r1, r1, r6
 800031e:	4463      	add	r3, ip
 8000320:	0424      	lsls	r4, r4, #16
 8000322:	1960      	adds	r0, r4, r5
 8000324:	18c9      	adds	r1, r1, r3
 8000326:	bcc0      	pop	{r6, r7}
 8000328:	46b9      	mov	r9, r7
 800032a:	46b0      	mov	r8, r6
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	46c0      	nop			@ (mov r8, r8)

08000330 <__udivmoddi4>:
 8000330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000332:	4657      	mov	r7, sl
 8000334:	464e      	mov	r6, r9
 8000336:	4645      	mov	r5, r8
 8000338:	46de      	mov	lr, fp
 800033a:	b5e0      	push	{r5, r6, r7, lr}
 800033c:	0004      	movs	r4, r0
 800033e:	000d      	movs	r5, r1
 8000340:	4692      	mov	sl, r2
 8000342:	4699      	mov	r9, r3
 8000344:	b083      	sub	sp, #12
 8000346:	428b      	cmp	r3, r1
 8000348:	d830      	bhi.n	80003ac <__udivmoddi4+0x7c>
 800034a:	d02d      	beq.n	80003a8 <__udivmoddi4+0x78>
 800034c:	4649      	mov	r1, r9
 800034e:	4650      	mov	r0, sl
 8000350:	f000 f9ea 	bl	8000728 <__clzdi2>
 8000354:	0029      	movs	r1, r5
 8000356:	0006      	movs	r6, r0
 8000358:	0020      	movs	r0, r4
 800035a:	f000 f9e5 	bl	8000728 <__clzdi2>
 800035e:	1a33      	subs	r3, r6, r0
 8000360:	4698      	mov	r8, r3
 8000362:	3b20      	subs	r3, #32
 8000364:	d434      	bmi.n	80003d0 <__udivmoddi4+0xa0>
 8000366:	469b      	mov	fp, r3
 8000368:	4653      	mov	r3, sl
 800036a:	465a      	mov	r2, fp
 800036c:	4093      	lsls	r3, r2
 800036e:	4642      	mov	r2, r8
 8000370:	001f      	movs	r7, r3
 8000372:	4653      	mov	r3, sl
 8000374:	4093      	lsls	r3, r2
 8000376:	001e      	movs	r6, r3
 8000378:	42af      	cmp	r7, r5
 800037a:	d83b      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800037c:	42af      	cmp	r7, r5
 800037e:	d100      	bne.n	8000382 <__udivmoddi4+0x52>
 8000380:	e079      	b.n	8000476 <__udivmoddi4+0x146>
 8000382:	465b      	mov	r3, fp
 8000384:	1ba4      	subs	r4, r4, r6
 8000386:	41bd      	sbcs	r5, r7
 8000388:	2b00      	cmp	r3, #0
 800038a:	da00      	bge.n	800038e <__udivmoddi4+0x5e>
 800038c:	e076      	b.n	800047c <__udivmoddi4+0x14c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2301      	movs	r3, #1
 8000398:	465a      	mov	r2, fp
 800039a:	4093      	lsls	r3, r2
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	2301      	movs	r3, #1
 80003a0:	4642      	mov	r2, r8
 80003a2:	4093      	lsls	r3, r2
 80003a4:	9300      	str	r3, [sp, #0]
 80003a6:	e029      	b.n	80003fc <__udivmoddi4+0xcc>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	d9cf      	bls.n	800034c <__udivmoddi4+0x1c>
 80003ac:	2200      	movs	r2, #0
 80003ae:	2300      	movs	r3, #0
 80003b0:	9200      	str	r2, [sp, #0]
 80003b2:	9301      	str	r3, [sp, #4]
 80003b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <__udivmoddi4+0x8e>
 80003ba:	601c      	str	r4, [r3, #0]
 80003bc:	605d      	str	r5, [r3, #4]
 80003be:	9800      	ldr	r0, [sp, #0]
 80003c0:	9901      	ldr	r1, [sp, #4]
 80003c2:	b003      	add	sp, #12
 80003c4:	bcf0      	pop	{r4, r5, r6, r7}
 80003c6:	46bb      	mov	fp, r7
 80003c8:	46b2      	mov	sl, r6
 80003ca:	46a9      	mov	r9, r5
 80003cc:	46a0      	mov	r8, r4
 80003ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003d0:	4642      	mov	r2, r8
 80003d2:	469b      	mov	fp, r3
 80003d4:	2320      	movs	r3, #32
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	4652      	mov	r2, sl
 80003da:	40da      	lsrs	r2, r3
 80003dc:	4641      	mov	r1, r8
 80003de:	0013      	movs	r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	408a      	lsls	r2, r1
 80003e4:	0017      	movs	r7, r2
 80003e6:	4642      	mov	r2, r8
 80003e8:	431f      	orrs	r7, r3
 80003ea:	4653      	mov	r3, sl
 80003ec:	4093      	lsls	r3, r2
 80003ee:	001e      	movs	r6, r3
 80003f0:	42af      	cmp	r7, r5
 80003f2:	d9c3      	bls.n	800037c <__udivmoddi4+0x4c>
 80003f4:	2200      	movs	r2, #0
 80003f6:	2300      	movs	r3, #0
 80003f8:	9200      	str	r2, [sp, #0]
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	4643      	mov	r3, r8
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d0d8      	beq.n	80003b4 <__udivmoddi4+0x84>
 8000402:	07fb      	lsls	r3, r7, #31
 8000404:	0872      	lsrs	r2, r6, #1
 8000406:	431a      	orrs	r2, r3
 8000408:	4646      	mov	r6, r8
 800040a:	087b      	lsrs	r3, r7, #1
 800040c:	e00e      	b.n	800042c <__udivmoddi4+0xfc>
 800040e:	42ab      	cmp	r3, r5
 8000410:	d101      	bne.n	8000416 <__udivmoddi4+0xe6>
 8000412:	42a2      	cmp	r2, r4
 8000414:	d80c      	bhi.n	8000430 <__udivmoddi4+0x100>
 8000416:	1aa4      	subs	r4, r4, r2
 8000418:	419d      	sbcs	r5, r3
 800041a:	2001      	movs	r0, #1
 800041c:	1924      	adds	r4, r4, r4
 800041e:	416d      	adcs	r5, r5
 8000420:	2100      	movs	r1, #0
 8000422:	3e01      	subs	r6, #1
 8000424:	1824      	adds	r4, r4, r0
 8000426:	414d      	adcs	r5, r1
 8000428:	2e00      	cmp	r6, #0
 800042a:	d006      	beq.n	800043a <__udivmoddi4+0x10a>
 800042c:	42ab      	cmp	r3, r5
 800042e:	d9ee      	bls.n	800040e <__udivmoddi4+0xde>
 8000430:	3e01      	subs	r6, #1
 8000432:	1924      	adds	r4, r4, r4
 8000434:	416d      	adcs	r5, r5
 8000436:	2e00      	cmp	r6, #0
 8000438:	d1f8      	bne.n	800042c <__udivmoddi4+0xfc>
 800043a:	9800      	ldr	r0, [sp, #0]
 800043c:	9901      	ldr	r1, [sp, #4]
 800043e:	465b      	mov	r3, fp
 8000440:	1900      	adds	r0, r0, r4
 8000442:	4169      	adcs	r1, r5
 8000444:	2b00      	cmp	r3, #0
 8000446:	db24      	blt.n	8000492 <__udivmoddi4+0x162>
 8000448:	002b      	movs	r3, r5
 800044a:	465a      	mov	r2, fp
 800044c:	4644      	mov	r4, r8
 800044e:	40d3      	lsrs	r3, r2
 8000450:	002a      	movs	r2, r5
 8000452:	40e2      	lsrs	r2, r4
 8000454:	001c      	movs	r4, r3
 8000456:	465b      	mov	r3, fp
 8000458:	0015      	movs	r5, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	db2a      	blt.n	80004b4 <__udivmoddi4+0x184>
 800045e:	0026      	movs	r6, r4
 8000460:	409e      	lsls	r6, r3
 8000462:	0033      	movs	r3, r6
 8000464:	0026      	movs	r6, r4
 8000466:	4647      	mov	r7, r8
 8000468:	40be      	lsls	r6, r7
 800046a:	0032      	movs	r2, r6
 800046c:	1a80      	subs	r0, r0, r2
 800046e:	4199      	sbcs	r1, r3
 8000470:	9000      	str	r0, [sp, #0]
 8000472:	9101      	str	r1, [sp, #4]
 8000474:	e79e      	b.n	80003b4 <__udivmoddi4+0x84>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d8bc      	bhi.n	80003f4 <__udivmoddi4+0xc4>
 800047a:	e782      	b.n	8000382 <__udivmoddi4+0x52>
 800047c:	4642      	mov	r2, r8
 800047e:	2320      	movs	r3, #32
 8000480:	2100      	movs	r1, #0
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	2200      	movs	r2, #0
 8000486:	9100      	str	r1, [sp, #0]
 8000488:	9201      	str	r2, [sp, #4]
 800048a:	2201      	movs	r2, #1
 800048c:	40da      	lsrs	r2, r3
 800048e:	9201      	str	r2, [sp, #4]
 8000490:	e785      	b.n	800039e <__udivmoddi4+0x6e>
 8000492:	4642      	mov	r2, r8
 8000494:	2320      	movs	r3, #32
 8000496:	1a9b      	subs	r3, r3, r2
 8000498:	002a      	movs	r2, r5
 800049a:	4646      	mov	r6, r8
 800049c:	409a      	lsls	r2, r3
 800049e:	0023      	movs	r3, r4
 80004a0:	40f3      	lsrs	r3, r6
 80004a2:	4644      	mov	r4, r8
 80004a4:	4313      	orrs	r3, r2
 80004a6:	002a      	movs	r2, r5
 80004a8:	40e2      	lsrs	r2, r4
 80004aa:	001c      	movs	r4, r3
 80004ac:	465b      	mov	r3, fp
 80004ae:	0015      	movs	r5, r2
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	dad4      	bge.n	800045e <__udivmoddi4+0x12e>
 80004b4:	4642      	mov	r2, r8
 80004b6:	002f      	movs	r7, r5
 80004b8:	2320      	movs	r3, #32
 80004ba:	0026      	movs	r6, r4
 80004bc:	4097      	lsls	r7, r2
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	40de      	lsrs	r6, r3
 80004c2:	003b      	movs	r3, r7
 80004c4:	4333      	orrs	r3, r6
 80004c6:	e7cd      	b.n	8000464 <__udivmoddi4+0x134>

080004c8 <__eqsf2>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	0042      	lsls	r2, r0, #1
 80004cc:	024e      	lsls	r6, r1, #9
 80004ce:	004c      	lsls	r4, r1, #1
 80004d0:	0245      	lsls	r5, r0, #9
 80004d2:	0a6d      	lsrs	r5, r5, #9
 80004d4:	0e12      	lsrs	r2, r2, #24
 80004d6:	0fc3      	lsrs	r3, r0, #31
 80004d8:	0a76      	lsrs	r6, r6, #9
 80004da:	0e24      	lsrs	r4, r4, #24
 80004dc:	0fc9      	lsrs	r1, r1, #31
 80004de:	2aff      	cmp	r2, #255	@ 0xff
 80004e0:	d010      	beq.n	8000504 <__eqsf2+0x3c>
 80004e2:	2cff      	cmp	r4, #255	@ 0xff
 80004e4:	d00c      	beq.n	8000500 <__eqsf2+0x38>
 80004e6:	2001      	movs	r0, #1
 80004e8:	42a2      	cmp	r2, r4
 80004ea:	d10a      	bne.n	8000502 <__eqsf2+0x3a>
 80004ec:	42b5      	cmp	r5, r6
 80004ee:	d108      	bne.n	8000502 <__eqsf2+0x3a>
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d00f      	beq.n	8000514 <__eqsf2+0x4c>
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d104      	bne.n	8000502 <__eqsf2+0x3a>
 80004f8:	0028      	movs	r0, r5
 80004fa:	1e43      	subs	r3, r0, #1
 80004fc:	4198      	sbcs	r0, r3
 80004fe:	e000      	b.n	8000502 <__eqsf2+0x3a>
 8000500:	2001      	movs	r0, #1
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	2001      	movs	r0, #1
 8000506:	2cff      	cmp	r4, #255	@ 0xff
 8000508:	d1fb      	bne.n	8000502 <__eqsf2+0x3a>
 800050a:	4335      	orrs	r5, r6
 800050c:	d1f9      	bne.n	8000502 <__eqsf2+0x3a>
 800050e:	404b      	eors	r3, r1
 8000510:	0018      	movs	r0, r3
 8000512:	e7f6      	b.n	8000502 <__eqsf2+0x3a>
 8000514:	2000      	movs	r0, #0
 8000516:	e7f4      	b.n	8000502 <__eqsf2+0x3a>

08000518 <__gesf2>:
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	0042      	lsls	r2, r0, #1
 800051c:	0244      	lsls	r4, r0, #9
 800051e:	024d      	lsls	r5, r1, #9
 8000520:	0fc3      	lsrs	r3, r0, #31
 8000522:	0048      	lsls	r0, r1, #1
 8000524:	0a64      	lsrs	r4, r4, #9
 8000526:	0e12      	lsrs	r2, r2, #24
 8000528:	0a6d      	lsrs	r5, r5, #9
 800052a:	0e00      	lsrs	r0, r0, #24
 800052c:	0fc9      	lsrs	r1, r1, #31
 800052e:	2aff      	cmp	r2, #255	@ 0xff
 8000530:	d019      	beq.n	8000566 <__gesf2+0x4e>
 8000532:	28ff      	cmp	r0, #255	@ 0xff
 8000534:	d00b      	beq.n	800054e <__gesf2+0x36>
 8000536:	2a00      	cmp	r2, #0
 8000538:	d11e      	bne.n	8000578 <__gesf2+0x60>
 800053a:	2800      	cmp	r0, #0
 800053c:	d10b      	bne.n	8000556 <__gesf2+0x3e>
 800053e:	2d00      	cmp	r5, #0
 8000540:	d027      	beq.n	8000592 <__gesf2+0x7a>
 8000542:	2c00      	cmp	r4, #0
 8000544:	d134      	bne.n	80005b0 <__gesf2+0x98>
 8000546:	2900      	cmp	r1, #0
 8000548:	d02f      	beq.n	80005aa <__gesf2+0x92>
 800054a:	0008      	movs	r0, r1
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	2d00      	cmp	r5, #0
 8000550:	d128      	bne.n	80005a4 <__gesf2+0x8c>
 8000552:	2a00      	cmp	r2, #0
 8000554:	d101      	bne.n	800055a <__gesf2+0x42>
 8000556:	2c00      	cmp	r4, #0
 8000558:	d0f5      	beq.n	8000546 <__gesf2+0x2e>
 800055a:	428b      	cmp	r3, r1
 800055c:	d107      	bne.n	800056e <__gesf2+0x56>
 800055e:	2b00      	cmp	r3, #0
 8000560:	d023      	beq.n	80005aa <__gesf2+0x92>
 8000562:	0018      	movs	r0, r3
 8000564:	e7f2      	b.n	800054c <__gesf2+0x34>
 8000566:	2c00      	cmp	r4, #0
 8000568:	d11c      	bne.n	80005a4 <__gesf2+0x8c>
 800056a:	28ff      	cmp	r0, #255	@ 0xff
 800056c:	d014      	beq.n	8000598 <__gesf2+0x80>
 800056e:	1e58      	subs	r0, r3, #1
 8000570:	2302      	movs	r3, #2
 8000572:	4018      	ands	r0, r3
 8000574:	3801      	subs	r0, #1
 8000576:	e7e9      	b.n	800054c <__gesf2+0x34>
 8000578:	2800      	cmp	r0, #0
 800057a:	d0f8      	beq.n	800056e <__gesf2+0x56>
 800057c:	428b      	cmp	r3, r1
 800057e:	d1f6      	bne.n	800056e <__gesf2+0x56>
 8000580:	4282      	cmp	r2, r0
 8000582:	dcf4      	bgt.n	800056e <__gesf2+0x56>
 8000584:	dbeb      	blt.n	800055e <__gesf2+0x46>
 8000586:	42ac      	cmp	r4, r5
 8000588:	d8f1      	bhi.n	800056e <__gesf2+0x56>
 800058a:	2000      	movs	r0, #0
 800058c:	42ac      	cmp	r4, r5
 800058e:	d2dd      	bcs.n	800054c <__gesf2+0x34>
 8000590:	e7e5      	b.n	800055e <__gesf2+0x46>
 8000592:	2c00      	cmp	r4, #0
 8000594:	d0da      	beq.n	800054c <__gesf2+0x34>
 8000596:	e7ea      	b.n	800056e <__gesf2+0x56>
 8000598:	2d00      	cmp	r5, #0
 800059a:	d103      	bne.n	80005a4 <__gesf2+0x8c>
 800059c:	428b      	cmp	r3, r1
 800059e:	d1e6      	bne.n	800056e <__gesf2+0x56>
 80005a0:	2000      	movs	r0, #0
 80005a2:	e7d3      	b.n	800054c <__gesf2+0x34>
 80005a4:	2002      	movs	r0, #2
 80005a6:	4240      	negs	r0, r0
 80005a8:	e7d0      	b.n	800054c <__gesf2+0x34>
 80005aa:	2001      	movs	r0, #1
 80005ac:	4240      	negs	r0, r0
 80005ae:	e7cd      	b.n	800054c <__gesf2+0x34>
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d0e8      	beq.n	8000586 <__gesf2+0x6e>
 80005b4:	e7db      	b.n	800056e <__gesf2+0x56>
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__lesf2>:
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	0042      	lsls	r2, r0, #1
 80005bc:	0244      	lsls	r4, r0, #9
 80005be:	024d      	lsls	r5, r1, #9
 80005c0:	0fc3      	lsrs	r3, r0, #31
 80005c2:	0048      	lsls	r0, r1, #1
 80005c4:	0a64      	lsrs	r4, r4, #9
 80005c6:	0e12      	lsrs	r2, r2, #24
 80005c8:	0a6d      	lsrs	r5, r5, #9
 80005ca:	0e00      	lsrs	r0, r0, #24
 80005cc:	0fc9      	lsrs	r1, r1, #31
 80005ce:	2aff      	cmp	r2, #255	@ 0xff
 80005d0:	d01a      	beq.n	8000608 <__lesf2+0x50>
 80005d2:	28ff      	cmp	r0, #255	@ 0xff
 80005d4:	d00e      	beq.n	80005f4 <__lesf2+0x3c>
 80005d6:	2a00      	cmp	r2, #0
 80005d8:	d11e      	bne.n	8000618 <__lesf2+0x60>
 80005da:	2800      	cmp	r0, #0
 80005dc:	d10e      	bne.n	80005fc <__lesf2+0x44>
 80005de:	2d00      	cmp	r5, #0
 80005e0:	d02a      	beq.n	8000638 <__lesf2+0x80>
 80005e2:	2c00      	cmp	r4, #0
 80005e4:	d00c      	beq.n	8000600 <__lesf2+0x48>
 80005e6:	428b      	cmp	r3, r1
 80005e8:	d01d      	beq.n	8000626 <__lesf2+0x6e>
 80005ea:	1e58      	subs	r0, r3, #1
 80005ec:	2302      	movs	r3, #2
 80005ee:	4018      	ands	r0, r3
 80005f0:	3801      	subs	r0, #1
 80005f2:	e010      	b.n	8000616 <__lesf2+0x5e>
 80005f4:	2d00      	cmp	r5, #0
 80005f6:	d10d      	bne.n	8000614 <__lesf2+0x5c>
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	d120      	bne.n	800063e <__lesf2+0x86>
 80005fc:	2c00      	cmp	r4, #0
 80005fe:	d11e      	bne.n	800063e <__lesf2+0x86>
 8000600:	2900      	cmp	r1, #0
 8000602:	d023      	beq.n	800064c <__lesf2+0x94>
 8000604:	0008      	movs	r0, r1
 8000606:	e006      	b.n	8000616 <__lesf2+0x5e>
 8000608:	2c00      	cmp	r4, #0
 800060a:	d103      	bne.n	8000614 <__lesf2+0x5c>
 800060c:	28ff      	cmp	r0, #255	@ 0xff
 800060e:	d1ec      	bne.n	80005ea <__lesf2+0x32>
 8000610:	2d00      	cmp	r5, #0
 8000612:	d017      	beq.n	8000644 <__lesf2+0x8c>
 8000614:	2002      	movs	r0, #2
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	2800      	cmp	r0, #0
 800061a:	d0e6      	beq.n	80005ea <__lesf2+0x32>
 800061c:	428b      	cmp	r3, r1
 800061e:	d1e4      	bne.n	80005ea <__lesf2+0x32>
 8000620:	4282      	cmp	r2, r0
 8000622:	dce2      	bgt.n	80005ea <__lesf2+0x32>
 8000624:	db04      	blt.n	8000630 <__lesf2+0x78>
 8000626:	42ac      	cmp	r4, r5
 8000628:	d8df      	bhi.n	80005ea <__lesf2+0x32>
 800062a:	2000      	movs	r0, #0
 800062c:	42ac      	cmp	r4, r5
 800062e:	d2f2      	bcs.n	8000616 <__lesf2+0x5e>
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00b      	beq.n	800064c <__lesf2+0x94>
 8000634:	0018      	movs	r0, r3
 8000636:	e7ee      	b.n	8000616 <__lesf2+0x5e>
 8000638:	2c00      	cmp	r4, #0
 800063a:	d0ec      	beq.n	8000616 <__lesf2+0x5e>
 800063c:	e7d5      	b.n	80005ea <__lesf2+0x32>
 800063e:	428b      	cmp	r3, r1
 8000640:	d1d3      	bne.n	80005ea <__lesf2+0x32>
 8000642:	e7f5      	b.n	8000630 <__lesf2+0x78>
 8000644:	2000      	movs	r0, #0
 8000646:	428b      	cmp	r3, r1
 8000648:	d0e5      	beq.n	8000616 <__lesf2+0x5e>
 800064a:	e7ce      	b.n	80005ea <__lesf2+0x32>
 800064c:	2001      	movs	r0, #1
 800064e:	4240      	negs	r0, r0
 8000650:	e7e1      	b.n	8000616 <__lesf2+0x5e>
 8000652:	46c0      	nop			@ (mov r8, r8)

08000654 <__aeabi_i2f>:
 8000654:	b570      	push	{r4, r5, r6, lr}
 8000656:	2800      	cmp	r0, #0
 8000658:	d013      	beq.n	8000682 <__aeabi_i2f+0x2e>
 800065a:	17c3      	asrs	r3, r0, #31
 800065c:	18c5      	adds	r5, r0, r3
 800065e:	405d      	eors	r5, r3
 8000660:	0fc4      	lsrs	r4, r0, #31
 8000662:	0028      	movs	r0, r5
 8000664:	f000 f842 	bl	80006ec <__clzsi2>
 8000668:	239e      	movs	r3, #158	@ 0x9e
 800066a:	0001      	movs	r1, r0
 800066c:	1a1b      	subs	r3, r3, r0
 800066e:	2b96      	cmp	r3, #150	@ 0x96
 8000670:	dc0f      	bgt.n	8000692 <__aeabi_i2f+0x3e>
 8000672:	2808      	cmp	r0, #8
 8000674:	d034      	beq.n	80006e0 <__aeabi_i2f+0x8c>
 8000676:	3908      	subs	r1, #8
 8000678:	408d      	lsls	r5, r1
 800067a:	026d      	lsls	r5, r5, #9
 800067c:	0a6d      	lsrs	r5, r5, #9
 800067e:	b2d8      	uxtb	r0, r3
 8000680:	e002      	b.n	8000688 <__aeabi_i2f+0x34>
 8000682:	2400      	movs	r4, #0
 8000684:	2000      	movs	r0, #0
 8000686:	2500      	movs	r5, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	4328      	orrs	r0, r5
 800068c:	07e4      	lsls	r4, r4, #31
 800068e:	4320      	orrs	r0, r4
 8000690:	bd70      	pop	{r4, r5, r6, pc}
 8000692:	2b99      	cmp	r3, #153	@ 0x99
 8000694:	dc16      	bgt.n	80006c4 <__aeabi_i2f+0x70>
 8000696:	1f42      	subs	r2, r0, #5
 8000698:	2805      	cmp	r0, #5
 800069a:	d000      	beq.n	800069e <__aeabi_i2f+0x4a>
 800069c:	4095      	lsls	r5, r2
 800069e:	002a      	movs	r2, r5
 80006a0:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <__aeabi_i2f+0x94>)
 80006a2:	4002      	ands	r2, r0
 80006a4:	076e      	lsls	r6, r5, #29
 80006a6:	d009      	beq.n	80006bc <__aeabi_i2f+0x68>
 80006a8:	260f      	movs	r6, #15
 80006aa:	4035      	ands	r5, r6
 80006ac:	2d04      	cmp	r5, #4
 80006ae:	d005      	beq.n	80006bc <__aeabi_i2f+0x68>
 80006b0:	3204      	adds	r2, #4
 80006b2:	0155      	lsls	r5, r2, #5
 80006b4:	d502      	bpl.n	80006bc <__aeabi_i2f+0x68>
 80006b6:	239f      	movs	r3, #159	@ 0x9f
 80006b8:	4002      	ands	r2, r0
 80006ba:	1a5b      	subs	r3, r3, r1
 80006bc:	0192      	lsls	r2, r2, #6
 80006be:	0a55      	lsrs	r5, r2, #9
 80006c0:	b2d8      	uxtb	r0, r3
 80006c2:	e7e1      	b.n	8000688 <__aeabi_i2f+0x34>
 80006c4:	2205      	movs	r2, #5
 80006c6:	1a12      	subs	r2, r2, r0
 80006c8:	0028      	movs	r0, r5
 80006ca:	40d0      	lsrs	r0, r2
 80006cc:	0002      	movs	r2, r0
 80006ce:	0008      	movs	r0, r1
 80006d0:	301b      	adds	r0, #27
 80006d2:	4085      	lsls	r5, r0
 80006d4:	0028      	movs	r0, r5
 80006d6:	1e45      	subs	r5, r0, #1
 80006d8:	41a8      	sbcs	r0, r5
 80006da:	4302      	orrs	r2, r0
 80006dc:	0015      	movs	r5, r2
 80006de:	e7de      	b.n	800069e <__aeabi_i2f+0x4a>
 80006e0:	026d      	lsls	r5, r5, #9
 80006e2:	2096      	movs	r0, #150	@ 0x96
 80006e4:	0a6d      	lsrs	r5, r5, #9
 80006e6:	e7cf      	b.n	8000688 <__aeabi_i2f+0x34>
 80006e8:	fbffffff 	.word	0xfbffffff

080006ec <__clzsi2>:
 80006ec:	211c      	movs	r1, #28
 80006ee:	2301      	movs	r3, #1
 80006f0:	041b      	lsls	r3, r3, #16
 80006f2:	4298      	cmp	r0, r3
 80006f4:	d301      	bcc.n	80006fa <__clzsi2+0xe>
 80006f6:	0c00      	lsrs	r0, r0, #16
 80006f8:	3910      	subs	r1, #16
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	4298      	cmp	r0, r3
 80006fe:	d301      	bcc.n	8000704 <__clzsi2+0x18>
 8000700:	0a00      	lsrs	r0, r0, #8
 8000702:	3908      	subs	r1, #8
 8000704:	091b      	lsrs	r3, r3, #4
 8000706:	4298      	cmp	r0, r3
 8000708:	d301      	bcc.n	800070e <__clzsi2+0x22>
 800070a:	0900      	lsrs	r0, r0, #4
 800070c:	3904      	subs	r1, #4
 800070e:	a202      	add	r2, pc, #8	@ (adr r2, 8000718 <__clzsi2+0x2c>)
 8000710:	5c10      	ldrb	r0, [r2, r0]
 8000712:	1840      	adds	r0, r0, r1
 8000714:	4770      	bx	lr
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	02020304 	.word	0x02020304
 800071c:	01010101 	.word	0x01010101
	...

08000728 <__clzdi2>:
 8000728:	b510      	push	{r4, lr}
 800072a:	2900      	cmp	r1, #0
 800072c:	d103      	bne.n	8000736 <__clzdi2+0xe>
 800072e:	f7ff ffdd 	bl	80006ec <__clzsi2>
 8000732:	3020      	adds	r0, #32
 8000734:	e002      	b.n	800073c <__clzdi2+0x14>
 8000736:	0008      	movs	r0, r1
 8000738:	f7ff ffd8 	bl	80006ec <__clzsi2>
 800073c:	bd10      	pop	{r4, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)

08000740 <LSM6DS33_init>:
 *      Author: OM
 */

#include "LSM6DS33.h"

void LSM6DS33_init(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af04      	add	r7, sp, #16

	uint8_t data;

	// ODR = 1000 (1.66 kHz (high performance)); FS_XL = 00 (+/-2 g full scale)
	data = 0x80; // 0x80 = 0b10000000
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write	(			&hi2c1,
 800074c:	4816      	ldr	r0, [pc, #88]	@ (80007a8 <LSM6DS33_init+0x68>)
 800074e:	2364      	movs	r3, #100	@ 0x64
 8000750:	9302      	str	r3, [sp, #8]
 8000752:	2301      	movs	r3, #1
 8000754:	9301      	str	r3, [sp, #4]
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2210      	movs	r2, #16
 800075e:	21d4      	movs	r1, #212	@ 0xd4
 8000760:	f001 f978 	bl	8001a54 <HAL_I2C_Mem_Write>
							1,
							100
						);

	 // ODR = 1000 (1.66 kHz (high performance)); FS_G = 00 (245 dps for DS33)
	data = 0x80; // 0x80 = 0b10000000
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write	(			&hi2c1,
 800076a:	480f      	ldr	r0, [pc, #60]	@ (80007a8 <LSM6DS33_init+0x68>)
 800076c:	2364      	movs	r3, #100	@ 0x64
 800076e:	9302      	str	r3, [sp, #8]
 8000770:	2301      	movs	r3, #1
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	1dfb      	adds	r3, r7, #7
 8000776:	9300      	str	r3, [sp, #0]
 8000778:	2301      	movs	r3, #1
 800077a:	2211      	movs	r2, #17
 800077c:	21d4      	movs	r1, #212	@ 0xd4
 800077e:	f001 f969 	bl	8001a54 <HAL_I2C_Mem_Write>
							&data,
							1,
							100
						);

	data = 0x44; // 0x44 = 0b01000100
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	2244      	movs	r2, #68	@ 0x44
 8000786:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write	(			&hi2c1,
 8000788:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <LSM6DS33_init+0x68>)
 800078a:	2364      	movs	r3, #100	@ 0x64
 800078c:	9302      	str	r3, [sp, #8]
 800078e:	2301      	movs	r3, #1
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	2216      	movs	r2, #22
 800079a:	21d4      	movs	r1, #212	@ 0xd4
 800079c:	f001 f95a 	bl	8001a54 <HAL_I2C_Mem_Write>
							100
						);



}
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000028 	.word	0x20000028

080007ac <read_data_acc>:
	  if(2 == eksen)	return gyro_raw[1];
	  if(3 == eksen)	return gyro_raw[2];

}

float read_data_acc(int eksen){
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	6078      	str	r0, [r7, #4]

	uint8_t buffer[6];
	int16_t acc_raw[3];

	  buffer[0]=0x28;
 80007b4:	2410      	movs	r4, #16
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	2228      	movs	r2, #40	@ 0x28
 80007ba:	701a      	strb	r2, [r3, #0]
	  HAL_I2C_Master_Transmit(&hi2c1,(0x6A)<<1,buffer,1,HAL_MAX_DELAY);
 80007bc:	193a      	adds	r2, r7, r4
 80007be:	482d      	ldr	r0, [pc, #180]	@ (8000874 <read_data_acc+0xc8>)
 80007c0:	2301      	movs	r3, #1
 80007c2:	425b      	negs	r3, r3
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2301      	movs	r3, #1
 80007c8:	21d4      	movs	r1, #212	@ 0xd4
 80007ca:	f000 ff33 	bl	8001634 <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1,(0x6A)<<1,buffer,6,HAL_MAX_DELAY);
 80007ce:	193a      	adds	r2, r7, r4
 80007d0:	4828      	ldr	r0, [pc, #160]	@ (8000874 <read_data_acc+0xc8>)
 80007d2:	2301      	movs	r3, #1
 80007d4:	425b      	negs	r3, r3
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2306      	movs	r3, #6
 80007da:	21d4      	movs	r1, #212	@ 0xd4
 80007dc:	f001 f832 	bl	8001844 <HAL_I2C_Master_Receive>

	  acc_raw[0] = (buffer[1] << 8 | buffer[0]);
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	785b      	ldrb	r3, [r3, #1]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b21b      	sxth	r3, r3
 80007f0:	4313      	orrs	r3, r2
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	2008      	movs	r0, #8
 80007f6:	183b      	adds	r3, r7, r0
 80007f8:	801a      	strh	r2, [r3, #0]
	  acc_raw[1] = (buffer[3] << 8 | buffer[2]);
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	78db      	ldrb	r3, [r3, #3]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	187b      	adds	r3, r7, r1
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	b21b      	sxth	r3, r3
 8000808:	4313      	orrs	r3, r2
 800080a:	b21a      	sxth	r2, r3
 800080c:	183b      	adds	r3, r7, r0
 800080e:	805a      	strh	r2, [r3, #2]
	  acc_raw[2] = (buffer[5] << 8 | buffer[4]);
 8000810:	187b      	adds	r3, r7, r1
 8000812:	795b      	ldrb	r3, [r3, #5]
 8000814:	021b      	lsls	r3, r3, #8
 8000816:	b21a      	sxth	r2, r3
 8000818:	187b      	adds	r3, r7, r1
 800081a:	791b      	ldrb	r3, [r3, #4]
 800081c:	b21b      	sxth	r3, r3
 800081e:	4313      	orrs	r3, r2
 8000820:	b21a      	sxth	r2, r3
 8000822:	183b      	adds	r3, r7, r0
 8000824:	809a      	strh	r2, [r3, #4]

	  if(1 == eksen)	return acc_raw[0];
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d107      	bne.n	800083c <read_data_acc+0x90>
 800082c:	183b      	adds	r3, r7, r0
 800082e:	2200      	movs	r2, #0
 8000830:	5e9b      	ldrsh	r3, [r3, r2]
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff0e 	bl	8000654 <__aeabi_i2f>
 8000838:	1c03      	adds	r3, r0, #0
 800083a:	e017      	b.n	800086c <read_data_acc+0xc0>
	  if(2 == eksen)	return acc_raw[1];
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b02      	cmp	r3, #2
 8000840:	d108      	bne.n	8000854 <read_data_acc+0xa8>
 8000842:	2308      	movs	r3, #8
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	2202      	movs	r2, #2
 8000848:	5e9b      	ldrsh	r3, [r3, r2]
 800084a:	0018      	movs	r0, r3
 800084c:	f7ff ff02 	bl	8000654 <__aeabi_i2f>
 8000850:	1c03      	adds	r3, r0, #0
 8000852:	e00b      	b.n	800086c <read_data_acc+0xc0>
	  if(3 == eksen)	return acc_raw[2];
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d108      	bne.n	800086c <read_data_acc+0xc0>
 800085a:	2308      	movs	r3, #8
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	2204      	movs	r2, #4
 8000860:	5e9b      	ldrsh	r3, [r3, r2]
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff fef6 	bl	8000654 <__aeabi_i2f>
 8000868:	1c03      	adds	r3, r0, #0
 800086a:	e7ff      	b.n	800086c <read_data_acc+0xc0>

}
 800086c:	1c18      	adds	r0, r3, #0
 800086e:	46bd      	mov	sp, r7
 8000870:	b007      	add	sp, #28
 8000872:	bd90      	pop	{r4, r7, pc}
 8000874:	20000028 	.word	0x20000028

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087e:	f000 fb39 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000882:	f000 f875 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 f925 	bl	8000ad4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800088a:	f000 f8e3 	bl	8000a54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize the sensor
  LSM6DS33_init();
 800088e:	f7ff ff57 	bl	8000740 <LSM6DS33_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	// --- PHASE 1: Wait 30 seconds ---
	HAL_Delay(25000);
 8000892:	4b36      	ldr	r3, [pc, #216]	@ (800096c <main+0xf4>)
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fb9d 	bl	8000fd4 <HAL_Delay>

	// Start blinking indicator LED for 5 seconds before UVC turns ON
	start_indicator_blink();
 800089a:	f000 fa4f 	bl	8000d3c <start_indicator_blink>

	// --- PHASE 2: Determine orientation ---
	OrientationType orientation = get_orientation();
 800089e:	1dfc      	adds	r4, r7, #7
 80008a0:	f000 f98e 	bl	8000bc0 <get_orientation>
 80008a4:	0003      	movs	r3, r0
 80008a6:	7023      	strb	r3, [r4, #0]

	// --- PHASE 3: Turn ON the correct UVC LED ---
	if (orientation == TOP_SIDE_UP)
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d107      	bne.n	80008c0 <main+0x48>
	{
		HAL_GPIO_WritePin(TOP_UVC_LED_GPIO_Port, TOP_UVC_LED_Pin, GPIO_PIN_SET);
 80008b0:	23a0      	movs	r3, #160	@ 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	2201      	movs	r2, #1
 80008b6:	2101      	movs	r1, #1
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 fded 	bl	8001498 <HAL_GPIO_WritePin>
 80008be:	e006      	b.n	80008ce <main+0x56>
	}
	else
	{
		HAL_GPIO_WritePin(BOTTOM_UVC_LED_GPIO_Port, BOTTOM_UVC_LED_Pin, GPIO_PIN_SET);
 80008c0:	23a0      	movs	r3, #160	@ 0xa0
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2201      	movs	r2, #1
 80008c6:	2102      	movs	r1, #2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fde5 	bl	8001498 <HAL_GPIO_WritePin>
	}
    HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, TOP_INDICATOR_LED_Pin, GPIO_PIN_RESET);
 80008ce:	23a0      	movs	r3, #160	@ 0xa0
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2200      	movs	r2, #0
 80008d4:	2108      	movs	r1, #8
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fdde 	bl	8001498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, BOTTOM_INDICATOR_LED_Pin, GPIO_PIN_RESET);
 80008dc:	23a0      	movs	r3, #160	@ 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	2200      	movs	r2, #0
 80008e2:	2180      	movs	r1, #128	@ 0x80
 80008e4:	0018      	movs	r0, r3
 80008e6:	f000 fdd7 	bl	8001498 <HAL_GPIO_WritePin>
	// --- PHASE 4: Keep Indicator LED blinking WHILE UVC is ON (90 seconds) ---
	if (orientation == TOP_SIDE_UP)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d114      	bne.n	800091c <main+0xa4>
	{

		for (int i = 0; i < 180; i++)  // 90s / 500ms = 180 blinks
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e00d      	b.n	8000914 <main+0x9c>
		{
			HAL_GPIO_TogglePin(INDICATOR_LED_GPIO_Port, TOP_INDICATOR_LED_Pin);
 80008f8:	23a0      	movs	r3, #160	@ 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	2108      	movs	r1, #8
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 fde7 	bl	80014d2 <HAL_GPIO_TogglePin>
			HAL_Delay(500);  // 500ms blink interval
 8000904:	23fa      	movs	r3, #250	@ 0xfa
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fb63 	bl	8000fd4 <HAL_Delay>
		for (int i = 0; i < 180; i++)  // 90s / 500ms = 180 blinks
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3301      	adds	r3, #1
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2bb3      	cmp	r3, #179	@ 0xb3
 8000918:	ddee      	ble.n	80008f8 <main+0x80>
 800091a:	e013      	b.n	8000944 <main+0xcc>
		}
	}
	else
	{
		for (int i = 0; i < 180; i++)  // 90s / 500ms = 180 blinks
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	e00d      	b.n	800093e <main+0xc6>
		{
			HAL_GPIO_TogglePin(INDICATOR_LED_GPIO_Port, BOTTOM_INDICATOR_LED_Pin);
 8000922:	23a0      	movs	r3, #160	@ 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2180      	movs	r1, #128	@ 0x80
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fdd2 	bl	80014d2 <HAL_GPIO_TogglePin>
			HAL_Delay(500);  // 500ms blink interval
 800092e:	23fa      	movs	r3, #250	@ 0xfa
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	0018      	movs	r0, r3
 8000934:	f000 fb4e 	bl	8000fd4 <HAL_Delay>
		for (int i = 0; i < 180; i++)  // 90s / 500ms = 180 blinks
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	3301      	adds	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2bb3      	cmp	r3, #179	@ 0xb3
 8000942:	ddee      	ble.n	8000922 <main+0xaa>
		}
	}
	// --- PHASE 5: Turn off both UVC LEDs ---
	HAL_GPIO_WritePin(TOP_UVC_LED_GPIO_Port, TOP_UVC_LED_Pin, GPIO_PIN_RESET);
 8000944:	23a0      	movs	r3, #160	@ 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	2200      	movs	r2, #0
 800094a:	2101      	movs	r1, #1
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fda3 	bl	8001498 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BOTTOM_UVC_LED_GPIO_Port, BOTTOM_UVC_LED_Pin, GPIO_PIN_RESET);
 8000952:	23a0      	movs	r3, #160	@ 0xa0
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2200      	movs	r2, #0
 8000958:	2102      	movs	r1, #2
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fd9c 	bl	8001498 <HAL_GPIO_WritePin>

	// --- PHASE 6: Stop Indicator LED ---
	stop_indicator_blink();
 8000960:	f000 fa0e 	bl	8000d80 <stop_indicator_blink>

	// --- PHASE 7: Enter Low-Power Mode for 1 Hour ---
	enter_low_power_mode();
 8000964:	f000 f97c 	bl	8000c60 <enter_low_power_mode>
  {
 8000968:	e793      	b.n	8000892 <main+0x1a>
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	000061a8 	.word	0x000061a8

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b099      	sub	sp, #100	@ 0x64
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	242c      	movs	r4, #44	@ 0x2c
 8000978:	193b      	adds	r3, r7, r4
 800097a:	0018      	movs	r0, r3
 800097c:	2334      	movs	r3, #52	@ 0x34
 800097e:	001a      	movs	r2, r3
 8000980:	2100      	movs	r1, #0
 8000982:	f002 fbd5 	bl	8003130 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	2318      	movs	r3, #24
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	0018      	movs	r0, r3
 800098c:	2314      	movs	r3, #20
 800098e:	001a      	movs	r2, r3
 8000990:	2100      	movs	r1, #0
 8000992:	f002 fbcd 	bl	8003130 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000996:	003b      	movs	r3, r7
 8000998:	0018      	movs	r0, r3
 800099a:	2318      	movs	r3, #24
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f002 fbc6 	bl	8003130 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a4:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <SystemClock_Config+0xdc>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a29      	ldr	r2, [pc, #164]	@ (8000a50 <SystemClock_Config+0xe0>)
 80009aa:	401a      	ands	r2, r3
 80009ac:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <SystemClock_Config+0xdc>)
 80009ae:	2180      	movs	r1, #128	@ 0x80
 80009b0:	0109      	lsls	r1, r1, #4
 80009b2:	430a      	orrs	r2, r1
 80009b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2218      	movs	r2, #24
 80009bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2201      	movs	r2, #1
 80009c2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2201      	movs	r2, #1
 80009c8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	22a0      	movs	r2, #160	@ 0xa0
 80009d4:	0212      	lsls	r2, r2, #8
 80009d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fd0f 	bl	8002404 <HAL_RCC_OscConfig>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80009ea:	f000 f9dc 	bl	8000da6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	2118      	movs	r1, #24
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	220f      	movs	r2, #15
 80009f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2100      	movs	r1, #0
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 f872 	bl	8002afc <HAL_RCC_ClockConfig>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a1c:	f000 f9c3 	bl	8000da6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
 8000a20:	003b      	movs	r3, r7
 8000a22:	2228      	movs	r2, #40	@ 0x28
 8000a24:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a26:	003b      	movs	r3, r7
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a2c:	003b      	movs	r3, r7
 8000a2e:	2280      	movs	r2, #128	@ 0x80
 8000a30:	0292      	lsls	r2, r2, #10
 8000a32:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	003b      	movs	r3, r7
 8000a36:	0018      	movs	r0, r3
 8000a38:	f002 fa4e 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a40:	f000 f9b1 	bl	8000da6 <Error_Handler>
  }
}
 8000a44:	46c0      	nop			@ (mov r8, r8)
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b019      	add	sp, #100	@ 0x64
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	40007000 	.word	0x40007000
 8000a50:	ffffe7ff 	.word	0xffffe7ff

08000a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a58:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad0 <MX_I2C1_Init+0x7c>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a60:	22c1      	movs	r2, #193	@ 0xc1
 8000a62:	00d2      	lsls	r2, r2, #3
 8000a64:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a66:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fd38 	bl	8001508 <HAL_I2C_Init>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a9c:	f000 f983 	bl	8000da6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 fc15 	bl	80022d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000aaa:	1e03      	subs	r3, r0, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aae:	f000 f97a 	bl	8000da6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_I2C1_Init+0x78>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 fc58 	bl	800236c <HAL_I2CEx_ConfigDigitalFilter>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f000 f971 	bl	8000da6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	20000028 	.word	0x20000028
 8000ad0:	40005400 	.word	0x40005400

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	240c      	movs	r4, #12
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	0018      	movs	r0, r3
 8000ae0:	2314      	movs	r3, #20
 8000ae2:	001a      	movs	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f002 fb23 	bl	8003130 <memset>

    /* ✅ Enable GPIO Ports Clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b34      	ldr	r3, [pc, #208]	@ (8000bbc <MX_GPIO_Init+0xe8>)
 8000aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aee:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <MX_GPIO_Init+0xe8>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000af6:	4b31      	ldr	r3, [pc, #196]	@ (8000bbc <MX_GPIO_Init+0xe8>)
 8000af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000afa:	2201      	movs	r2, #1
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <MX_GPIO_Init+0xe8>)
 8000b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b06:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <MX_GPIO_Init+0xe8>)
 8000b08:	2102      	movs	r1, #2
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000bbc <MX_GPIO_Init+0xe8>)
 8000b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b12:	2202      	movs	r2, #2
 8000b14:	4013      	ands	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

    /* ✅ Configure GPIO pin for TOP UVC LED */
    GPIO_InitStruct.Pin = TOP_UVC_LED_Pin;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // Push-Pull mode
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2201      	movs	r2, #1
 8000b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;          // No pull-up/pull-down
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Low speed to save power
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(TOP_UVC_LED_GPIO_Port, &GPIO_InitStruct);
 8000b32:	193a      	adds	r2, r7, r4
 8000b34:	23a0      	movs	r3, #160	@ 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 fb3e 	bl	80011bc <HAL_GPIO_Init>

    /* ✅ Configure GPIO pin for BOTTOM UVC LED */
    GPIO_InitStruct.Pin = BOTTOM_UVC_LED_Pin;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2202      	movs	r2, #2
 8000b44:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(BOTTOM_UVC_LED_GPIO_Port, &GPIO_InitStruct);
 8000b46:	193a      	adds	r2, r7, r4
 8000b48:	23a0      	movs	r3, #160	@ 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fb34 	bl	80011bc <HAL_GPIO_Init>

    /* ✅ Configure GPIO pin for INDICATOR LED */
    GPIO_InitStruct.Pin = TOP_INDICATOR_LED_Pin;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2208      	movs	r2, #8
 8000b58:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	193a      	adds	r2, r7, r4
 8000b5c:	23a0      	movs	r3, #160	@ 0xa0
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	0011      	movs	r1, r2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fb2a 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BOTTOM_INDICATOR_LED_Pin;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2280      	movs	r2, #128	@ 0x80
 8000b6c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	193a      	adds	r2, r7, r4
 8000b70:	23a0      	movs	r3, #160	@ 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	0011      	movs	r1, r2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f000 fb20 	bl	80011bc <HAL_GPIO_Init>

    /* ✅ Ensure all LEDs are OFF at startup */
    HAL_GPIO_WritePin(TOP_UVC_LED_GPIO_Port, TOP_UVC_LED_Pin, GPIO_PIN_RESET);
 8000b7c:	23a0      	movs	r3, #160	@ 0xa0
 8000b7e:	05db      	lsls	r3, r3, #23
 8000b80:	2200      	movs	r2, #0
 8000b82:	2101      	movs	r1, #1
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fc87 	bl	8001498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BOTTOM_UVC_LED_GPIO_Port, BOTTOM_UVC_LED_Pin, GPIO_PIN_RESET);
 8000b8a:	23a0      	movs	r3, #160	@ 0xa0
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2102      	movs	r1, #2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f000 fc80 	bl	8001498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, TOP_INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000b98:	23a0      	movs	r3, #160	@ 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2108      	movs	r1, #8
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 fc79 	bl	8001498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, BOTTOM_INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000ba6:	23a0      	movs	r3, #160	@ 0xa0
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2200      	movs	r2, #0
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fc72 	bl	8001498 <HAL_GPIO_WritePin>

  /* GPIO Ports Clock Enable */

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	b009      	add	sp, #36	@ 0x24
 8000bba:	bd90      	pop	{r4, r7, pc}
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <get_orientation>:

/* USER CODE BEGIN 4 */
OrientationType get_orientation(void)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
    float ax = read_data_acc(1);  // ✅ Correct
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fdf0 	bl	80007ac <read_data_acc>
 8000bcc:	1c03      	adds	r3, r0, #0
 8000bce:	617b      	str	r3, [r7, #20]
    float ay = read_data_acc(2);
 8000bd0:	2002      	movs	r0, #2
 8000bd2:	f7ff fdeb 	bl	80007ac <read_data_acc>
 8000bd6:	1c03      	adds	r3, r0, #0
 8000bd8:	613b      	str	r3, [r7, #16]
    float az = read_data_acc(3);
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f7ff fde6 	bl	80007ac <read_data_acc>
 8000be0:	1c03      	adds	r3, r0, #0
 8000be2:	60fb      	str	r3, [r7, #12]

    float absX = fabs(ax);
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	085b      	lsrs	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
    float absY = fabs(ay);
 8000bec:	693b      	ldr	r3, [r7, #16]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	085b      	lsrs	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
    float absZ = fabs(az);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	085b      	lsrs	r3, r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]

    // Determine which side is up
    if (absZ >= absX && absZ >= absY)
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6838      	ldr	r0, [r7, #0]
 8000c00:	f7ff fb3e 	bl	8000280 <__aeabi_fcmpge>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d017      	beq.n	8000c38 <get_orientation+0x78>
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	6838      	ldr	r0, [r7, #0]
 8000c0c:	f7ff fb38 	bl	8000280 <__aeabi_fcmpge>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d011      	beq.n	8000c38 <get_orientation+0x78>
    {
        if (az > 0.5) return TOP_SIDE_UP;  // Slight tilt tolerance
 8000c14:	21fc      	movs	r1, #252	@ 0xfc
 8000c16:	0589      	lsls	r1, r1, #22
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f7ff fb27 	bl	800026c <__aeabi_fcmpgt>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <get_orientation+0x66>
 8000c22:	2300      	movs	r3, #0
 8000c24:	e017      	b.n	8000c56 <get_orientation+0x96>
        else if (az < -0.5) return BOTTOM_SIDE_UP;
 8000c26:	21bf      	movs	r1, #191	@ 0xbf
 8000c28:	0609      	lsls	r1, r1, #24
 8000c2a:	68f8      	ldr	r0, [r7, #12]
 8000c2c:	f7ff fb0a 	bl	8000244 <__aeabi_fcmplt>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <get_orientation+0x78>
 8000c34:	2301      	movs	r3, #1
 8000c36:	e00e      	b.n	8000c56 <get_orientation+0x96>
    }

    // If it's on its side, decide based on tilt
    return (az >= 0) ? TOP_SIDE_UP : BOTTOM_SIDE_UP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	1c1c      	adds	r4, r3, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	68f8      	ldr	r0, [r7, #12]
 8000c40:	f7ff fb1e 	bl	8000280 <__aeabi_fcmpge>
 8000c44:	1e03      	subs	r3, r0, #0
 8000c46:	d101      	bne.n	8000c4c <get_orientation+0x8c>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	1c1c      	adds	r4, r3, #0
 8000c4c:	b2e3      	uxtb	r3, r4
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4053      	eors	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	b2db      	uxtb	r3, r3
}
 8000c56:	0018      	movs	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b007      	add	sp, #28
 8000c5c:	bd90      	pop	{r4, r7, pc}
	...

08000c60 <enter_low_power_mode>:

void enter_low_power_mode(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
    uint32_t tickstart = HAL_GetTick();
 8000c66:	f000 f9ab 	bl	8000fc0 <HAL_GetTick>
 8000c6a:	0003      	movs	r3, r0
 8000c6c:	60fb      	str	r3, [r7, #12]

    // ✅ Disable Unused Peripherals Before Sleep
    __HAL_RCC_GPIOA_CLK_DISABLE();
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c72:	4b2e      	ldr	r3, [pc, #184]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	438a      	bics	r2, r1
 8000c78:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000c80:	2102      	movs	r1, #2
 8000c82:	438a      	bics	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000c86:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000c88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000c8c:	4928      	ldr	r1, [pc, #160]	@ (8000d30 <enter_low_power_mode+0xd0>)
 8000c8e:	400a      	ands	r2, r1
 8000c90:	639a      	str	r2, [r3, #56]	@ 0x38

    // ✅ Suspend SysTick to prevent unwanted wake-ups
    HAL_SuspendTick();
 8000c92:	f000 f9c3 	bl	800101c <HAL_SuspendTick>

    // ✅ Set SLEEPDEEP only once before entering sleep loop
    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <enter_low_power_mode+0xd4>)
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <enter_low_power_mode+0xd4>)
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	611a      	str	r2, [r3, #16]

    while ((HAL_GetTick() - tickstart) < 3600000)  // 1 Hour = 3,600,000 ms
 8000ca2:	e000      	b.n	8000ca6 <enter_low_power_mode+0x46>
    {
        __WFI();  // ✅ Enter STOP Mode (Deep Sleep)
 8000ca4:	bf30      	wfi
    while ((HAL_GetTick() - tickstart) < 3600000)  // 1 Hour = 3,600,000 ms
 8000ca6:	f000 f98b 	bl	8000fc0 <HAL_GetTick>
 8000caa:	0002      	movs	r2, r0
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	1ad3      	subs	r3, r2, r3
 8000cb0:	4a21      	ldr	r2, [pc, #132]	@ (8000d38 <enter_low_power_mode+0xd8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d9f6      	bls.n	8000ca4 <enter_low_power_mode+0x44>
    }

    // ✅ MCU Wakes Up Here

    // ✅ Restore System Clock (STOP mode disables HSI)
    SystemClock_Config();
 8000cb6:	f7ff fe5b 	bl	8000970 <SystemClock_Config>

    // ✅ Resume SysTick After Wake-up
    HAL_ResumeTick();
 8000cba:	f000 f9bd 	bl	8001038 <HAL_ResumeTick>

    // ✅ Re-enable Peripherals After Wake-up
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b15      	ldr	r3, [pc, #84]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000cdc:	2102      	movs	r1, #2
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	4013      	ands	r3, r2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000cf4:	2180      	movs	r1, #128	@ 0x80
 8000cf6:	0389      	lsls	r1, r1, #14
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	639a      	str	r2, [r3, #56]	@ 0x38

    // ✅ Reset I2C & Reinitialize Accelerometer
    __HAL_RCC_I2C1_FORCE_RESET();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000cfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000d02:	2180      	movs	r1, #128	@ 0x80
 8000d04:	0389      	lsls	r1, r1, #14
 8000d06:	430a      	orrs	r2, r1
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_Delay(10);
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f000 f962 	bl	8000fd4 <HAL_Delay>
    __HAL_RCC_I2C1_RELEASE_RESET();
 8000d10:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000d12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <enter_low_power_mode+0xcc>)
 8000d16:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <enter_low_power_mode+0xd0>)
 8000d18:	400a      	ands	r2, r1
 8000d1a:	629a      	str	r2, [r3, #40]	@ 0x28
    MX_I2C1_Init();
 8000d1c:	f7ff fe9a 	bl	8000a54 <MX_I2C1_Init>
    LSM6DS33_init();
 8000d20:	f7ff fd0e 	bl	8000740 <LSM6DS33_init>
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b004      	add	sp, #16
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	ffdfffff 	.word	0xffdfffff
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	0036ee7f 	.word	0x0036ee7f

08000d3c <start_indicator_blink>:


void start_indicator_blink(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
    // Blink the indicator LED 10 times for full 5 seconds
    for (int i = 0; i < 10; i++)
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	e013      	b.n	8000d70 <start_indicator_blink+0x34>
    {
        HAL_GPIO_TogglePin(INDICATOR_LED_GPIO_Port, TOP_INDICATOR_LED_Pin);
 8000d48:	23a0      	movs	r3, #160	@ 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fbbf 	bl	80014d2 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(INDICATOR_LED_GPIO_Port, BOTTOM_INDICATOR_LED_Pin);
 8000d54:	23a0      	movs	r3, #160	@ 0xa0
 8000d56:	05db      	lsls	r3, r3, #23
 8000d58:	2180      	movs	r1, #128	@ 0x80
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fbb9 	bl	80014d2 <HAL_GPIO_TogglePin>
        HAL_Delay(500);  // 500ms blink interval
 8000d60:	23fa      	movs	r3, #250	@ 0xfa
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	0018      	movs	r0, r3
 8000d66:	f000 f935 	bl	8000fd4 <HAL_Delay>
    for (int i = 0; i < 10; i++)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b09      	cmp	r3, #9
 8000d74:	dde8      	ble.n	8000d48 <start_indicator_blink+0xc>
    }
}
 8000d76:	46c0      	nop			@ (mov r8, r8)
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b002      	add	sp, #8
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <stop_indicator_blink>:



void stop_indicator_blink(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    // Ensure LED is off
    HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, TOP_INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000d84:	23a0      	movs	r3, #160	@ 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 fb83 	bl	8001498 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, BOTTOM_INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000d92:	23a0      	movs	r3, #160	@ 0xa0
 8000d94:	05db      	lsls	r3, r3, #23
 8000d96:	2200      	movs	r2, #0
 8000d98:	2180      	movs	r1, #128	@ 0x80
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fb7c 	bl	8001498 <HAL_GPIO_WritePin>

}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000daa:	b672      	cpsid	i
}
 8000dac:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	e7fd      	b.n	8000dae <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	0549      	lsls	r1, r1, #21
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	240c      	movs	r4, #12
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	0018      	movs	r0, r3
 8000dea:	2314      	movs	r3, #20
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f002 f99e 	bl	8003130 <memset>
  if(hi2c->Instance==I2C1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <HAL_I2C_MspInit+0x80>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d12a      	bne.n	8000e54 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b18      	ldr	r3, [pc, #96]	@ (8000e60 <HAL_I2C_MspInit+0x84>)
 8000e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e02:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <HAL_I2C_MspInit+0x84>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e0a:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_I2C_MspInit+0x84>)
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	22c0      	movs	r2, #192	@ 0xc0
 8000e1a:	00d2      	lsls	r2, r2, #3
 8000e1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	0021      	movs	r1, r4
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2212      	movs	r2, #18
 8000e24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	2201      	movs	r2, #1
 8000e36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	187a      	adds	r2, r7, r1
 8000e3a:	23a0      	movs	r3, #160	@ 0xa0
 8000e3c:	05db      	lsls	r3, r3, #23
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 f9bb 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_I2C_MspInit+0x84>)
 8000e48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e4a:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <HAL_I2C_MspInit+0x84>)
 8000e4c:	2180      	movs	r1, #128	@ 0x80
 8000e4e:	0389      	lsls	r1, r1, #14
 8000e50:	430a      	orrs	r2, r1
 8000e52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e54:	46c0      	nop			@ (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b009      	add	sp, #36	@ 0x24
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	40021000 	.word	0x40021000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	e7fd      	b.n	8000e68 <NMI_Handler+0x4>

08000e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	e7fd      	b.n	8000e70 <HardFault_Handler+0x4>

08000e74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e78:	46c0      	nop			@ (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f886 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	46c0      	nop			@ (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <Reset_Handler>:
 8000ea0:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <LoopForever+0x2>)
 8000ea2:	4685      	mov	sp, r0
 8000ea4:	f7ff fff7 	bl	8000e96 <SystemInit>
 8000ea8:	480c      	ldr	r0, [pc, #48]	@ (8000edc <LoopForever+0x6>)
 8000eaa:	490d      	ldr	r1, [pc, #52]	@ (8000ee0 <LoopForever+0xa>)
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <LoopForever+0xe>)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:
 8000eb2:	58d4      	ldr	r4, [r2, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:
 8000eb8:	18c4      	adds	r4, r0, r3
 8000eba:	428c      	cmp	r4, r1
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <LoopForever+0x12>)
 8000ec0:	4c0a      	ldr	r4, [pc, #40]	@ (8000eec <LoopForever+0x16>)
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:
 8000eca:	42a2      	cmp	r2, r4
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>
 8000ece:	f002 f937 	bl	8003140 <__libc_init_array>
 8000ed2:	f7ff fcd1 	bl	8000878 <main>

08000ed6 <LoopForever>:
 8000ed6:	e7fe      	b.n	8000ed6 <LoopForever>
 8000ed8:	20002000 	.word	0x20002000
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	080031cc 	.word	0x080031cc
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000080 	.word	0x20000080

08000ef0 <ADC1_COMP_IRQHandler>:
 8000ef0:	e7fe      	b.n	8000ef0 <ADC1_COMP_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <HAL_Init+0x3c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <HAL_Init+0x3c>)
 8000f06:	2140      	movs	r1, #64	@ 0x40
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f811 	bl	8000f34 <HAL_InitTick>
 8000f12:	1e03      	subs	r3, r0, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	e001      	b.n	8000f22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f1e:	f7ff ff49 	bl	8000db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	40022000 	.word	0x40022000

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <HAL_InitTick+0x5c>)
 8000f3e:	681c      	ldr	r4, [r3, #0]
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <HAL_InitTick+0x60>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	0019      	movs	r1, r3
 8000f46:	23fa      	movs	r3, #250	@ 0xfa
 8000f48:	0098      	lsls	r0, r3, #2
 8000f4a:	f7ff f8dd 	bl	8000108 <__udivsi3>
 8000f4e:	0003      	movs	r3, r0
 8000f50:	0019      	movs	r1, r3
 8000f52:	0020      	movs	r0, r4
 8000f54:	f7ff f8d8 	bl	8000108 <__udivsi3>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 f921 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d001      	beq.n	8000f68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e00f      	b.n	8000f88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d80b      	bhi.n	8000f86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	2301      	movs	r3, #1
 8000f72:	425b      	negs	r3, r3
 8000f74:	2200      	movs	r2, #0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f8fe 	bl	8001178 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_InitTick+0x64>)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <HAL_IncTick+0x1c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	18d2      	adds	r2, r2, r3
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fae:	601a      	str	r2, [r3, #0]
}
 8000fb0:	46c0      	nop			@ (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	2000007c 	.word	0x2000007c

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b02      	ldr	r3, [pc, #8]	@ (8000fd0 <HAL_GetTick+0x10>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	2000007c 	.word	0x2000007c

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff fff0 	bl	8000fc0 <HAL_GetTick>
 8000fe0:	0003      	movs	r3, r0
 8000fe2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3301      	adds	r3, #1
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	@ (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	189b      	adds	r3, r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	f7ff ffe0 	bl	8000fc0 <HAL_GetTick>
 8001000:	0002      	movs	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b004      	add	sp, #16
 8001014:	bd80      	pop	{r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <HAL_SuspendTick+0x18>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <HAL_SuspendTick+0x18>)
 8001026:	2102      	movs	r1, #2
 8001028:	438a      	bics	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <HAL_ResumeTick+0x18>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_ResumeTick+0x18>)
 8001042:	2102      	movs	r1, #2
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	e000e010 	.word	0xe000e010

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	0002      	movs	r2, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b7f      	cmp	r3, #127	@ 0x7f
 8001068:	d828      	bhi.n	80010bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800106a:	4a2f      	ldr	r2, [pc, #188]	@ (8001128 <__NVIC_SetPriority+0xd4>)
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b25b      	sxtb	r3, r3
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	33c0      	adds	r3, #192	@ 0xc0
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	589b      	ldr	r3, [r3, r2]
 800107a:	1dfa      	adds	r2, r7, #7
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	0011      	movs	r1, r2
 8001080:	2203      	movs	r2, #3
 8001082:	400a      	ands	r2, r1
 8001084:	00d2      	lsls	r2, r2, #3
 8001086:	21ff      	movs	r1, #255	@ 0xff
 8001088:	4091      	lsls	r1, r2
 800108a:	000a      	movs	r2, r1
 800108c:	43d2      	mvns	r2, r2
 800108e:	401a      	ands	r2, r3
 8001090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	019b      	lsls	r3, r3, #6
 8001096:	22ff      	movs	r2, #255	@ 0xff
 8001098:	401a      	ands	r2, r3
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	0018      	movs	r0, r3
 80010a0:	2303      	movs	r3, #3
 80010a2:	4003      	ands	r3, r0
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a8:	481f      	ldr	r0, [pc, #124]	@ (8001128 <__NVIC_SetPriority+0xd4>)
 80010aa:	1dfb      	adds	r3, r7, #7
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	089b      	lsrs	r3, r3, #2
 80010b2:	430a      	orrs	r2, r1
 80010b4:	33c0      	adds	r3, #192	@ 0xc0
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010ba:	e031      	b.n	8001120 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010bc:	4a1b      	ldr	r2, [pc, #108]	@ (800112c <__NVIC_SetPriority+0xd8>)
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	0019      	movs	r1, r3
 80010c4:	230f      	movs	r3, #15
 80010c6:	400b      	ands	r3, r1
 80010c8:	3b08      	subs	r3, #8
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3306      	adds	r3, #6
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	3304      	adds	r3, #4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	1dfa      	adds	r2, r7, #7
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	0011      	movs	r1, r2
 80010dc:	2203      	movs	r2, #3
 80010de:	400a      	ands	r2, r1
 80010e0:	00d2      	lsls	r2, r2, #3
 80010e2:	21ff      	movs	r1, #255	@ 0xff
 80010e4:	4091      	lsls	r1, r2
 80010e6:	000a      	movs	r2, r1
 80010e8:	43d2      	mvns	r2, r2
 80010ea:	401a      	ands	r2, r3
 80010ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	22ff      	movs	r2, #255	@ 0xff
 80010f4:	401a      	ands	r2, r3
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	0018      	movs	r0, r3
 80010fc:	2303      	movs	r3, #3
 80010fe:	4003      	ands	r3, r0
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001104:	4809      	ldr	r0, [pc, #36]	@ (800112c <__NVIC_SetPriority+0xd8>)
 8001106:	1dfb      	adds	r3, r7, #7
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	001c      	movs	r4, r3
 800110c:	230f      	movs	r3, #15
 800110e:	4023      	ands	r3, r4
 8001110:	3b08      	subs	r3, #8
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	430a      	orrs	r2, r1
 8001116:	3306      	adds	r3, #6
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	18c3      	adds	r3, r0, r3
 800111c:	3304      	adds	r3, #4
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	46c0      	nop			@ (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b003      	add	sp, #12
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	045b      	lsls	r3, r3, #17
 8001140:	429a      	cmp	r2, r3
 8001142:	d301      	bcc.n	8001148 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001144:	2301      	movs	r3, #1
 8001146:	e010      	b.n	800116a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001148:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <SysTick_Config+0x44>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	3a01      	subs	r2, #1
 800114e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001150:	2301      	movs	r3, #1
 8001152:	425b      	negs	r3, r3
 8001154:	2103      	movs	r1, #3
 8001156:	0018      	movs	r0, r3
 8001158:	f7ff ff7c 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SysTick_Config+0x44>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SysTick_Config+0x44>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	0018      	movs	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	b002      	add	sp, #8
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	210f      	movs	r1, #15
 8001184:	187b      	adds	r3, r7, r1
 8001186:	1c02      	adds	r2, r0, #0
 8001188:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	187b      	adds	r3, r7, r1
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	b25b      	sxtb	r3, r3
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b004      	add	sp, #16
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ffbf 	bl	8001130 <SysTick_Config>
 80011b2:	0003      	movs	r3, r0
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80011d2:	e149      	b.n	8001468 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4091      	lsls	r1, r2
 80011de:	000a      	movs	r2, r1
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d100      	bne.n	80011ec <HAL_GPIO_Init+0x30>
 80011ea:	e13a      	b.n	8001462 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d005      	beq.n	8001204 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001200:	2b02      	cmp	r3, #2
 8001202:	d130      	bne.n	8001266 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	2203      	movs	r2, #3
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	43da      	mvns	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	409a      	lsls	r2, r3
 8001226:	0013      	movs	r3, r2
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800123a:	2201      	movs	r2, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	091b      	lsrs	r3, r3, #4
 8001250:	2201      	movs	r2, #1
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2203      	movs	r2, #3
 800126c:	4013      	ands	r3, r2
 800126e:	2b03      	cmp	r3, #3
 8001270:	d017      	beq.n	80012a2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	2203      	movs	r2, #3
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	689a      	ldr	r2, [r3, #8]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2203      	movs	r2, #3
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d123      	bne.n	80012f6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	08da      	lsrs	r2, r3, #3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	3208      	adds	r2, #8
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	58d3      	ldr	r3, [r2, r3]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2207      	movs	r2, #7
 80012c0:	4013      	ands	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	43da      	mvns	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4013      	ands	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	691a      	ldr	r2, [r3, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2107      	movs	r1, #7
 80012da:	400b      	ands	r3, r1
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	0092      	lsls	r2, r2, #2
 80012f2:	6939      	ldr	r1, [r7, #16]
 80012f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2203      	movs	r2, #3
 8001314:	401a      	ands	r2, r3
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	23c0      	movs	r3, #192	@ 0xc0
 8001330:	029b      	lsls	r3, r3, #10
 8001332:	4013      	ands	r3, r2
 8001334:	d100      	bne.n	8001338 <HAL_GPIO_Init+0x17c>
 8001336:	e094      	b.n	8001462 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001338:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <HAL_GPIO_Init+0x2c4>)
 800133a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133c:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <HAL_GPIO_Init+0x2c4>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001344:	4a4f      	ldr	r2, [pc, #316]	@ (8001484 <HAL_GPIO_Init+0x2c8>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	589b      	ldr	r3, [r3, r2]
 8001350:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2203      	movs	r2, #3
 8001356:	4013      	ands	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	409a      	lsls	r2, r3
 800135e:	0013      	movs	r3, r2
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	23a0      	movs	r3, #160	@ 0xa0
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	429a      	cmp	r2, r3
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x1de>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a44      	ldr	r2, [pc, #272]	@ (8001488 <HAL_GPIO_Init+0x2cc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x1da>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a43      	ldr	r2, [pc, #268]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x1d6>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a42      	ldr	r2, [pc, #264]	@ (8001490 <HAL_GPIO_Init+0x2d4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x1d2>
 800138a:	2305      	movs	r3, #5
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x1e0>
 800138e:	2306      	movs	r3, #6
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x1e0>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x1e0>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x1e0>
 800139a:	2300      	movs	r3, #0
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	2103      	movs	r1, #3
 80013a0:	400a      	ands	r2, r1
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	@ (8001484 <HAL_GPIO_Init+0x2c8>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ba:	4b36      	ldr	r3, [pc, #216]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	2380      	movs	r3, #128	@ 0x80
 80013d0:	035b      	lsls	r3, r3, #13
 80013d2:	4013      	ands	r3, r2
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013de:	4b2d      	ldr	r3, [pc, #180]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43da      	mvns	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	2380      	movs	r3, #128	@ 0x80
 80013fa:	039b      	lsls	r3, r3, #14
 80013fc:	4013      	ands	r3, r2
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800140e:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	4013      	ands	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001432:	4b18      	ldr	r3, [pc, #96]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001438:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	@ 0x80
 800144e:	025b      	lsls	r3, r3, #9
 8001450:	4013      	ands	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800145c:	4b0d      	ldr	r3, [pc, #52]	@ (8001494 <HAL_GPIO_Init+0x2d8>)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	40da      	lsrs	r2, r3
 8001470:	1e13      	subs	r3, r2, #0
 8001472:	d000      	beq.n	8001476 <HAL_GPIO_Init+0x2ba>
 8001474:	e6ae      	b.n	80011d4 <HAL_GPIO_Init+0x18>
  }
}
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	46c0      	nop			@ (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b006      	add	sp, #24
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000
 8001488:	50000400 	.word	0x50000400
 800148c:	50000800 	.word	0x50000800
 8001490:	50001c00 	.word	0x50001c00
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	0008      	movs	r0, r1
 80014a2:	0011      	movs	r1, r2
 80014a4:	1cbb      	adds	r3, r7, #2
 80014a6:	1c02      	adds	r2, r0, #0
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	1c7b      	adds	r3, r7, #1
 80014ac:	1c0a      	adds	r2, r1, #0
 80014ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	1c7b      	adds	r3, r7, #1
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b8:	1cbb      	adds	r3, r7, #2
 80014ba:	881a      	ldrh	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80014c2:	1cbb      	adds	r3, r7, #2
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	000a      	movs	r2, r1
 80014dc:	1cbb      	adds	r3, r7, #2
 80014de:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014e6:	1cbb      	adds	r3, r7, #2
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	041a      	lsls	r2, r3, #16
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	1cb9      	adds	r1, r7, #2
 80014f6:	8809      	ldrh	r1, [r1, #0]
 80014f8:	400b      	ands	r3, r1
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
}
 8001500:	46c0      	nop			@ (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b004      	add	sp, #16
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e082      	b.n	8001620 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2241      	movs	r2, #65	@ 0x41
 800151e:	5c9b      	ldrb	r3, [r3, r2]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d107      	bne.n	8001536 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2240      	movs	r2, #64	@ 0x40
 800152a:	2100      	movs	r1, #0
 800152c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fc53 	bl	8000ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2241      	movs	r2, #65	@ 0x41
 800153a:	2124      	movs	r1, #36	@ 0x24
 800153c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2101      	movs	r1, #1
 800154a:	438a      	bics	r2, r1
 800154c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4934      	ldr	r1, [pc, #208]	@ (8001628 <HAL_I2C_Init+0x120>)
 8001558:	400a      	ands	r2, r1
 800155a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4931      	ldr	r1, [pc, #196]	@ (800162c <HAL_I2C_Init+0x124>)
 8001568:	400a      	ands	r2, r1
 800156a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d108      	bne.n	8001586 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	0209      	lsls	r1, r1, #8
 8001580:	430a      	orrs	r2, r1
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	e007      	b.n	8001596 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2184      	movs	r1, #132	@ 0x84
 8001590:	0209      	lsls	r1, r1, #8
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b02      	cmp	r3, #2
 800159c:	d104      	bne.n	80015a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	491f      	ldr	r1, [pc, #124]	@ (8001630 <HAL_I2C_Init+0x128>)
 80015b4:	430a      	orrs	r2, r1
 80015b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68da      	ldr	r2, [r3, #12]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	491a      	ldr	r1, [pc, #104]	@ (800162c <HAL_I2C_Init+0x124>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691a      	ldr	r2, [r3, #16]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	431a      	orrs	r2, r3
 80015d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69d9      	ldr	r1, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1a      	ldr	r2, [r3, #32]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2101      	movs	r1, #1
 80015fe:	430a      	orrs	r2, r1
 8001600:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2241      	movs	r2, #65	@ 0x41
 800160c:	2120      	movs	r1, #32
 800160e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2242      	movs	r2, #66	@ 0x42
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b002      	add	sp, #8
 8001626:	bd80      	pop	{r7, pc}
 8001628:	f0ffffff 	.word	0xf0ffffff
 800162c:	ffff7fff 	.word	0xffff7fff
 8001630:	02008000 	.word	0x02008000

08001634 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af02      	add	r7, sp, #8
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	0008      	movs	r0, r1
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	0019      	movs	r1, r3
 8001642:	230a      	movs	r3, #10
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	1c02      	adds	r2, r0, #0
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	2308      	movs	r3, #8
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	1c0a      	adds	r2, r1, #0
 8001650:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2241      	movs	r2, #65	@ 0x41
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b20      	cmp	r3, #32
 800165c:	d000      	beq.n	8001660 <HAL_I2C_Master_Transmit+0x2c>
 800165e:	e0e7      	b.n	8001830 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2240      	movs	r2, #64	@ 0x40
 8001664:	5c9b      	ldrb	r3, [r3, r2]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_I2C_Master_Transmit+0x3a>
 800166a:	2302      	movs	r3, #2
 800166c:	e0e1      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1fe>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2240      	movs	r2, #64	@ 0x40
 8001672:	2101      	movs	r1, #1
 8001674:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001676:	f7ff fca3 	bl	8000fc0 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800167e:	2380      	movs	r3, #128	@ 0x80
 8001680:	0219      	lsls	r1, r3, #8
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2319      	movs	r3, #25
 800168a:	2201      	movs	r2, #1
 800168c:	f000 fb96 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d001      	beq.n	8001698 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0cc      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2241      	movs	r2, #65	@ 0x41
 800169c:	2121      	movs	r1, #33	@ 0x21
 800169e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2242      	movs	r2, #66	@ 0x42
 80016a4:	2110      	movs	r1, #16
 80016a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2208      	movs	r2, #8
 80016b8:	18ba      	adds	r2, r7, r2
 80016ba:	8812      	ldrh	r2, [r2, #0]
 80016bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	2bff      	cmp	r3, #255	@ 0xff
 80016cc:	d911      	bls.n	80016f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	22ff      	movs	r2, #255	@ 0xff
 80016d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	045c      	lsls	r4, r3, #17
 80016de:	230a      	movs	r3, #10
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	8819      	ldrh	r1, [r3, #0]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	4b55      	ldr	r3, [pc, #340]	@ (800183c <HAL_I2C_Master_Transmit+0x208>)
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	0023      	movs	r3, r4
 80016ec:	f000 fdb8 	bl	8002260 <I2C_TransferConfig>
 80016f0:	e075      	b.n	80017de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001700:	b2da      	uxtb	r2, r3
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	049c      	lsls	r4, r3, #18
 8001706:	230a      	movs	r3, #10
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	8819      	ldrh	r1, [r3, #0]
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	4b4b      	ldr	r3, [pc, #300]	@ (800183c <HAL_I2C_Master_Transmit+0x208>)
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	0023      	movs	r3, r4
 8001714:	f000 fda4 	bl	8002260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001718:	e061      	b.n	80017de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	0018      	movs	r0, r3
 8001722:	f000 fb99 	bl	8001e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e081      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	781a      	ldrb	r2, [r3, #0]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d03a      	beq.n	80017de <HAL_I2C_Master_Transmit+0x1aa>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176c:	2b00      	cmp	r3, #0
 800176e:	d136      	bne.n	80017de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001770:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	0013      	movs	r3, r2
 800177a:	2200      	movs	r2, #0
 800177c:	2180      	movs	r1, #128	@ 0x80
 800177e:	f000 fb1d 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e053      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	2bff      	cmp	r3, #255	@ 0xff
 8001792:	d911      	bls.n	80017b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	22ff      	movs	r2, #255	@ 0xff
 8001798:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	045c      	lsls	r4, r3, #17
 80017a4:	230a      	movs	r3, #10
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	8819      	ldrh	r1, [r3, #0]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	2300      	movs	r3, #0
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	0023      	movs	r3, r4
 80017b2:	f000 fd55 	bl	8002260 <I2C_TransferConfig>
 80017b6:	e012      	b.n	80017de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017bc:	b29a      	uxth	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	2380      	movs	r3, #128	@ 0x80
 80017ca:	049c      	lsls	r4, r3, #18
 80017cc:	230a      	movs	r3, #10
 80017ce:	18fb      	adds	r3, r7, r3
 80017d0:	8819      	ldrh	r1, [r3, #0]
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	2300      	movs	r3, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	0023      	movs	r3, r4
 80017da:	f000 fd41 	bl	8002260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d198      	bne.n	800171a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f000 fb78 	bl	8001ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f4:	1e03      	subs	r3, r0, #0
 80017f6:	d001      	beq.n	80017fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e01a      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2220      	movs	r2, #32
 8001802:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	490c      	ldr	r1, [pc, #48]	@ (8001840 <HAL_I2C_Master_Transmit+0x20c>)
 8001810:	400a      	ands	r2, r1
 8001812:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2241      	movs	r2, #65	@ 0x41
 8001818:	2120      	movs	r1, #32
 800181a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2242      	movs	r2, #66	@ 0x42
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2240      	movs	r2, #64	@ 0x40
 8001828:	2100      	movs	r1, #0
 800182a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001830:	2302      	movs	r3, #2
  }
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b007      	add	sp, #28
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	80002000 	.word	0x80002000
 8001840:	fe00e800 	.word	0xfe00e800

08001844 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	0008      	movs	r0, r1
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	0019      	movs	r1, r3
 8001852:	230a      	movs	r3, #10
 8001854:	18fb      	adds	r3, r7, r3
 8001856:	1c02      	adds	r2, r0, #0
 8001858:	801a      	strh	r2, [r3, #0]
 800185a:	2308      	movs	r3, #8
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	1c0a      	adds	r2, r1, #0
 8001860:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2241      	movs	r2, #65	@ 0x41
 8001866:	5c9b      	ldrb	r3, [r3, r2]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b20      	cmp	r3, #32
 800186c:	d000      	beq.n	8001870 <HAL_I2C_Master_Receive+0x2c>
 800186e:	e0e8      	b.n	8001a42 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2240      	movs	r2, #64	@ 0x40
 8001874:	5c9b      	ldrb	r3, [r3, r2]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_I2C_Master_Receive+0x3a>
 800187a:	2302      	movs	r3, #2
 800187c:	e0e2      	b.n	8001a44 <HAL_I2C_Master_Receive+0x200>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2240      	movs	r2, #64	@ 0x40
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001886:	f7ff fb9b 	bl	8000fc0 <HAL_GetTick>
 800188a:	0003      	movs	r3, r0
 800188c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800188e:	2380      	movs	r3, #128	@ 0x80
 8001890:	0219      	lsls	r1, r3, #8
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2319      	movs	r3, #25
 800189a:	2201      	movs	r2, #1
 800189c:	f000 fa8e 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0cd      	b.n	8001a44 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2241      	movs	r2, #65	@ 0x41
 80018ac:	2122      	movs	r1, #34	@ 0x22
 80018ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2242      	movs	r2, #66	@ 0x42
 80018b4:	2110      	movs	r1, #16
 80018b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2208      	movs	r2, #8
 80018c8:	18ba      	adds	r2, r7, r2
 80018ca:	8812      	ldrh	r2, [r2, #0]
 80018cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018d8:	b29b      	uxth	r3, r3
 80018da:	2bff      	cmp	r3, #255	@ 0xff
 80018dc:	d911      	bls.n	8001902 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	22ff      	movs	r2, #255	@ 0xff
 80018e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	045c      	lsls	r4, r3, #17
 80018ee:	230a      	movs	r3, #10
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	8819      	ldrh	r1, [r3, #0]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	4b55      	ldr	r3, [pc, #340]	@ (8001a4c <HAL_I2C_Master_Receive+0x208>)
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	0023      	movs	r3, r4
 80018fc:	f000 fcb0 	bl	8002260 <I2C_TransferConfig>
 8001900:	e076      	b.n	80019f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001906:	b29a      	uxth	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001910:	b2da      	uxtb	r2, r3
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	049c      	lsls	r4, r3, #18
 8001916:	230a      	movs	r3, #10
 8001918:	18fb      	adds	r3, r7, r3
 800191a:	8819      	ldrh	r1, [r3, #0]
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	4b4b      	ldr	r3, [pc, #300]	@ (8001a4c <HAL_I2C_Master_Receive+0x208>)
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	0023      	movs	r3, r4
 8001924:	f000 fc9c 	bl	8002260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001928:	e062      	b.n	80019f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	0018      	movs	r0, r3
 8001932:	f000 fb1b 	bl	8001f6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001936:	1e03      	subs	r3, r0, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e082      	b.n	8001a44 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001974:	b29b      	uxth	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d03a      	beq.n	80019f0 <HAL_I2C_Master_Receive+0x1ac>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197e:	2b00      	cmp	r3, #0
 8001980:	d136      	bne.n	80019f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	0013      	movs	r3, r2
 800198c:	2200      	movs	r2, #0
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	f000 fa14 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001994:	1e03      	subs	r3, r0, #0
 8001996:	d001      	beq.n	800199c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e053      	b.n	8001a44 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2bff      	cmp	r3, #255	@ 0xff
 80019a4:	d911      	bls.n	80019ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	22ff      	movs	r2, #255	@ 0xff
 80019aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	2380      	movs	r3, #128	@ 0x80
 80019b4:	045c      	lsls	r4, r3, #17
 80019b6:	230a      	movs	r3, #10
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	8819      	ldrh	r1, [r3, #0]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	2300      	movs	r3, #0
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	0023      	movs	r3, r4
 80019c4:	f000 fc4c 	bl	8002260 <I2C_TransferConfig>
 80019c8:	e012      	b.n	80019f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	2380      	movs	r3, #128	@ 0x80
 80019dc:	049c      	lsls	r4, r3, #18
 80019de:	230a      	movs	r3, #10
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	8819      	ldrh	r1, [r3, #0]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	2300      	movs	r3, #0
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	0023      	movs	r3, r4
 80019ec:	f000 fc38 	bl	8002260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d197      	bne.n	800192a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 fa6f 	bl	8001ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a06:	1e03      	subs	r3, r0, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e01a      	b.n	8001a44 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2220      	movs	r2, #32
 8001a14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	490b      	ldr	r1, [pc, #44]	@ (8001a50 <HAL_I2C_Master_Receive+0x20c>)
 8001a22:	400a      	ands	r2, r1
 8001a24:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2241      	movs	r2, #65	@ 0x41
 8001a2a:	2120      	movs	r1, #32
 8001a2c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2242      	movs	r2, #66	@ 0x42
 8001a32:	2100      	movs	r1, #0
 8001a34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2240      	movs	r2, #64	@ 0x40
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8001a42:	2302      	movs	r3, #2
  }
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b007      	add	sp, #28
 8001a4a:	bd90      	pop	{r4, r7, pc}
 8001a4c:	80002400 	.word	0x80002400
 8001a50:	fe00e800 	.word	0xfe00e800

08001a54 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b089      	sub	sp, #36	@ 0x24
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	000c      	movs	r4, r1
 8001a5e:	0010      	movs	r0, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	230a      	movs	r3, #10
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	1c22      	adds	r2, r4, #0
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	2308      	movs	r3, #8
 8001a6c:	18fb      	adds	r3, r7, r3
 8001a6e:	1c02      	adds	r2, r0, #0
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	1dbb      	adds	r3, r7, #6
 8001a74:	1c0a      	adds	r2, r1, #0
 8001a76:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2241      	movs	r2, #65	@ 0x41
 8001a7c:	5c9b      	ldrb	r3, [r3, r2]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d000      	beq.n	8001a86 <HAL_I2C_Mem_Write+0x32>
 8001a84:	e10c      	b.n	8001ca0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <HAL_I2C_Mem_Write+0x42>
 8001a8c:	232c      	movs	r3, #44	@ 0x2c
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d105      	bne.n	8001aa2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2280      	movs	r2, #128	@ 0x80
 8001a9a:	0092      	lsls	r2, r2, #2
 8001a9c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0ff      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2240      	movs	r2, #64	@ 0x40
 8001aa6:	5c9b      	ldrb	r3, [r3, r2]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d101      	bne.n	8001ab0 <HAL_I2C_Mem_Write+0x5c>
 8001aac:	2302      	movs	r3, #2
 8001aae:	e0f8      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2240      	movs	r2, #64	@ 0x40
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ab8:	f7ff fa82 	bl	8000fc0 <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ac0:	2380      	movs	r3, #128	@ 0x80
 8001ac2:	0219      	lsls	r1, r3, #8
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2319      	movs	r3, #25
 8001acc:	2201      	movs	r2, #1
 8001ace:	f000 f975 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0e3      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2241      	movs	r2, #65	@ 0x41
 8001ade:	2121      	movs	r1, #33	@ 0x21
 8001ae0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2242      	movs	r2, #66	@ 0x42
 8001ae6:	2140      	movs	r1, #64	@ 0x40
 8001ae8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	222c      	movs	r2, #44	@ 0x2c
 8001afa:	18ba      	adds	r2, r7, r2
 8001afc:	8812      	ldrh	r2, [r2, #0]
 8001afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b06:	1dbb      	adds	r3, r7, #6
 8001b08:	881c      	ldrh	r4, [r3, #0]
 8001b0a:	2308      	movs	r3, #8
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	881a      	ldrh	r2, [r3, #0]
 8001b10:	230a      	movs	r3, #10
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	8819      	ldrh	r1, [r3, #0]
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	0023      	movs	r3, r4
 8001b22:	f000 f8c5 	bl	8001cb0 <I2C_RequestMemoryWrite>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2240      	movs	r2, #64	@ 0x40
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0b5      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2bff      	cmp	r3, #255	@ 0xff
 8001b3e:	d911      	bls.n	8001b64 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	22ff      	movs	r2, #255	@ 0xff
 8001b44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	045c      	lsls	r4, r3, #17
 8001b50:	230a      	movs	r3, #10
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	8819      	ldrh	r1, [r3, #0]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	0023      	movs	r3, r4
 8001b5e:	f000 fb7f 	bl	8002260 <I2C_TransferConfig>
 8001b62:	e012      	b.n	8001b8a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	2380      	movs	r3, #128	@ 0x80
 8001b76:	049c      	lsls	r4, r3, #18
 8001b78:	230a      	movs	r3, #10
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	8819      	ldrh	r1, [r3, #0]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	0023      	movs	r3, r4
 8001b86:	f000 fb6b 	bl	8002260 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f000 f961 	bl	8001e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e081      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d03a      	beq.n	8001c4e <HAL_I2C_Mem_Write+0x1fa>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d136      	bne.n	8001c4e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	0013      	movs	r3, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	2180      	movs	r1, #128	@ 0x80
 8001bee:	f000 f8e5 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e053      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2bff      	cmp	r3, #255	@ 0xff
 8001c02:	d911      	bls.n	8001c28 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	22ff      	movs	r2, #255	@ 0xff
 8001c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	045c      	lsls	r4, r3, #17
 8001c14:	230a      	movs	r3, #10
 8001c16:	18fb      	adds	r3, r7, r3
 8001c18:	8819      	ldrh	r1, [r3, #0]
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	0023      	movs	r3, r4
 8001c22:	f000 fb1d 	bl	8002260 <I2C_TransferConfig>
 8001c26:	e012      	b.n	8001c4e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	049c      	lsls	r4, r3, #18
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	8819      	ldrh	r1, [r3, #0]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	2300      	movs	r3, #0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	0023      	movs	r3, r4
 8001c4a:	f000 fb09 	bl	8002260 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d198      	bne.n	8001b8a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 f940 	bl	8001ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01a      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	490b      	ldr	r1, [pc, #44]	@ (8001cac <HAL_I2C_Mem_Write+0x258>)
 8001c80:	400a      	ands	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2241      	movs	r2, #65	@ 0x41
 8001c88:	2120      	movs	r1, #32
 8001c8a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2242      	movs	r2, #66	@ 0x42
 8001c90:	2100      	movs	r1, #0
 8001c92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2240      	movs	r2, #64	@ 0x40
 8001c98:	2100      	movs	r1, #0
 8001c9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e000      	b.n	8001ca2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001ca0:	2302      	movs	r3, #2
  }
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b007      	add	sp, #28
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	fe00e800 	.word	0xfe00e800

08001cb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	000c      	movs	r4, r1
 8001cba:	0010      	movs	r0, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	250a      	movs	r5, #10
 8001cc0:	197b      	adds	r3, r7, r5
 8001cc2:	1c22      	adds	r2, r4, #0
 8001cc4:	801a      	strh	r2, [r3, #0]
 8001cc6:	2308      	movs	r3, #8
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	1c02      	adds	r2, r0, #0
 8001ccc:	801a      	strh	r2, [r3, #0]
 8001cce:	1dbb      	adds	r3, r7, #6
 8001cd0:	1c0a      	adds	r2, r1, #0
 8001cd2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cd4:	1dbb      	adds	r3, r7, #6
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	2380      	movs	r3, #128	@ 0x80
 8001cdc:	045c      	lsls	r4, r3, #17
 8001cde:	197b      	adds	r3, r7, r5
 8001ce0:	8819      	ldrh	r1, [r3, #0]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <I2C_RequestMemoryWrite+0xc4>)
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	0023      	movs	r3, r4
 8001cea:	f000 fab9 	bl	8002260 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	6a39      	ldr	r1, [r7, #32]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 f8af 	bl	8001e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cfa:	1e03      	subs	r3, r0, #0
 8001cfc:	d001      	beq.n	8001d02 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e033      	b.n	8001d6a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d02:	1dbb      	adds	r3, r7, #6
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d107      	bne.n	8001d1a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d0a:	2308      	movs	r3, #8
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d18:	e019      	b.n	8001d4e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d2e:	6a39      	ldr	r1, [r7, #32]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	0018      	movs	r0, r3
 8001d34:	f000 f890 	bl	8001e58 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e014      	b.n	8001d6a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d40:	2308      	movs	r3, #8
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d4e:	6a3a      	ldr	r2, [r7, #32]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	0013      	movs	r3, r2
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2180      	movs	r1, #128	@ 0x80
 8001d5c:	f000 f82e 	bl	8001dbc <I2C_WaitOnFlagUntilTimeout>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d001      	beq.n	8001d68 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b004      	add	sp, #16
 8001d70:	bdb0      	pop	{r4, r5, r7, pc}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	80002000 	.word	0x80002000

08001d78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2202      	movs	r2, #2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d103      	bne.n	8001d96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d007      	beq.n	8001db4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2101      	movs	r1, #1
 8001db0:	430a      	orrs	r2, r1
 8001db2:	619a      	str	r2, [r3, #24]
  }
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b002      	add	sp, #8
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	1dfb      	adds	r3, r7, #7
 8001dca:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dcc:	e030      	b.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	d02d      	beq.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dd4:	f7ff f8f4 	bl	8000fc0 <HAL_GetTick>
 8001dd8:	0002      	movs	r2, r0
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d302      	bcc.n	8001dea <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d122      	bne.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	4013      	ands	r3, r2
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	425a      	negs	r2, r3
 8001dfa:	4153      	adcs	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	001a      	movs	r2, r3
 8001e00:	1dfb      	adds	r3, r7, #7
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d113      	bne.n	8001e30 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2241      	movs	r2, #65	@ 0x41
 8001e18:	2120      	movs	r1, #32
 8001e1a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2242      	movs	r2, #66	@ 0x42
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	2100      	movs	r1, #0
 8001e2a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e00f      	b.n	8001e50 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	425a      	negs	r2, r3
 8001e40:	4153      	adcs	r3, r2
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	001a      	movs	r2, r3
 8001e46:	1dfb      	adds	r3, r7, #7
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d0bf      	beq.n	8001dce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b004      	add	sp, #16
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e64:	e032      	b.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 f8ff 	bl	8002070 <I2C_IsErrorOccurred>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d001      	beq.n	8001e7a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e030      	b.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	d025      	beq.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e80:	f7ff f89e 	bl	8000fc0 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d302      	bcc.n	8001e96 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d11a      	bne.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d013      	beq.n	8001ecc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2241      	movs	r2, #65	@ 0x41
 8001eb4:	2120      	movs	r1, #32
 8001eb6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2242      	movs	r2, #66	@ 0x42
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2240      	movs	r2, #64	@ 0x40
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e007      	b.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d1c5      	bne.n	8001e66 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b004      	add	sp, #16
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ef0:	e02f      	b.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 f8b9 	bl	8002070 <I2C_IsErrorOccurred>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d001      	beq.n	8001f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e02d      	b.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7ff f85b 	bl	8000fc0 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	68ba      	ldr	r2, [r7, #8]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d11a      	bne.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2220      	movs	r2, #32
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b20      	cmp	r3, #32
 8001f28:	d013      	beq.n	8001f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	2220      	movs	r2, #32
 8001f30:	431a      	orrs	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2241      	movs	r2, #65	@ 0x41
 8001f3a:	2120      	movs	r1, #32
 8001f3c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2242      	movs	r2, #66	@ 0x42
 8001f42:	2100      	movs	r1, #0
 8001f44:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e007      	b.n	8001f62 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b20      	cmp	r3, #32
 8001f5e:	d1c8      	bne.n	8001ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f78:	e06b      	b.n	8002052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 f875 	bl	8002070 <I2C_IsErrorOccurred>
 8001f86:	1e03      	subs	r3, r0, #0
 8001f88:	d001      	beq.n	8001f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e069      	b.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2220      	movs	r2, #32
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b20      	cmp	r3, #32
 8001f9a:	d138      	bne.n	800200e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	d105      	bne.n	8001fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e055      	b.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b10      	cmp	r3, #16
 8001fc2:	d107      	bne.n	8001fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2210      	movs	r2, #16
 8001fca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fd2:	e002      	b.n	8001fda <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	491f      	ldr	r1, [pc, #124]	@ (800206c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001fee:	400a      	ands	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2241      	movs	r2, #65	@ 0x41
 8001ff6:	2120      	movs	r1, #32
 8001ff8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2242      	movs	r2, #66	@ 0x42
 8001ffe:	2100      	movs	r1, #0
 8002000:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2240      	movs	r2, #64	@ 0x40
 8002006:	2100      	movs	r1, #0
 8002008:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e029      	b.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7fe ffd7 	bl	8000fc0 <HAL_GetTick>
 8002012:	0002      	movs	r2, r0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d116      	bne.n	8002052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2204      	movs	r2, #4
 800202c:	4013      	ands	r3, r2
 800202e:	2b04      	cmp	r3, #4
 8002030:	d00f      	beq.n	8002052 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	2220      	movs	r2, #32
 8002038:	431a      	orrs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2241      	movs	r2, #65	@ 0x41
 8002042:	2120      	movs	r1, #32
 8002044:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	2100      	movs	r1, #0
 800204c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e007      	b.n	8002062 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2204      	movs	r2, #4
 800205a:	4013      	ands	r3, r2
 800205c:	2b04      	cmp	r3, #4
 800205e:	d18c      	bne.n	8001f7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	fe00e800 	.word	0xfe00e800

08002070 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800207c:	2327      	movs	r3, #39	@ 0x27
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2210      	movs	r2, #16
 8002098:	4013      	ands	r3, r2
 800209a:	d100      	bne.n	800209e <I2C_IsErrorOccurred+0x2e>
 800209c:	e079      	b.n	8002192 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2210      	movs	r2, #16
 80020a4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020a6:	e057      	b.n	8002158 <I2C_IsErrorOccurred+0xe8>
 80020a8:	2227      	movs	r2, #39	@ 0x27
 80020aa:	18bb      	adds	r3, r7, r2
 80020ac:	18ba      	adds	r2, r7, r2
 80020ae:	7812      	ldrb	r2, [r2, #0]
 80020b0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3301      	adds	r3, #1
 80020b6:	d04f      	beq.n	8002158 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020b8:	f7fe ff82 	bl	8000fc0 <HAL_GetTick>
 80020bc:	0002      	movs	r2, r0
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d302      	bcc.n	80020ce <I2C_IsErrorOccurred+0x5e>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d144      	bne.n	8002158 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	2380      	movs	r3, #128	@ 0x80
 80020d6:	01db      	lsls	r3, r3, #7
 80020d8:	4013      	ands	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80020dc:	2013      	movs	r0, #19
 80020de:	183b      	adds	r3, r7, r0
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	2142      	movs	r1, #66	@ 0x42
 80020e4:	5c52      	ldrb	r2, [r2, r1]
 80020e6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	401a      	ands	r2, r3
 80020f4:	2380      	movs	r3, #128	@ 0x80
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d126      	bne.n	800214a <I2C_IsErrorOccurred+0xda>
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	01db      	lsls	r3, r3, #7
 8002102:	429a      	cmp	r2, r3
 8002104:	d021      	beq.n	800214a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b20      	cmp	r3, #32
 800210c:	d01d      	beq.n	800214a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	01c9      	lsls	r1, r1, #7
 800211c:	430a      	orrs	r2, r1
 800211e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002120:	f7fe ff4e 	bl	8000fc0 <HAL_GetTick>
 8002124:	0003      	movs	r3, r0
 8002126:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002128:	e00f      	b.n	800214a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800212a:	f7fe ff49 	bl	8000fc0 <HAL_GetTick>
 800212e:	0002      	movs	r2, r0
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b19      	cmp	r3, #25
 8002136:	d908      	bls.n	800214a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	6a3b      	ldr	r3, [r7, #32]
 800213a:	2220      	movs	r2, #32
 800213c:	4313      	orrs	r3, r2
 800213e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002140:	2327      	movs	r3, #39	@ 0x27
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]

              break;
 8002148:	e006      	b.n	8002158 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	2220      	movs	r2, #32
 8002152:	4013      	ands	r3, r2
 8002154:	2b20      	cmp	r3, #32
 8002156:	d1e8      	bne.n	800212a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2220      	movs	r2, #32
 8002160:	4013      	ands	r3, r2
 8002162:	2b20      	cmp	r3, #32
 8002164:	d004      	beq.n	8002170 <I2C_IsErrorOccurred+0x100>
 8002166:	2327      	movs	r3, #39	@ 0x27
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d09b      	beq.n	80020a8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002170:	2327      	movs	r3, #39	@ 0x27
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d103      	bne.n	8002182 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2220      	movs	r2, #32
 8002180:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	2204      	movs	r2, #4
 8002186:	4313      	orrs	r3, r2
 8002188:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800218a:	2327      	movs	r3, #39	@ 0x27
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d00c      	beq.n	80021be <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	2201      	movs	r2, #1
 80021a8:	4313      	orrs	r3, r2
 80021aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2280      	movs	r2, #128	@ 0x80
 80021b2:	0052      	lsls	r2, r2, #1
 80021b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021b6:	2327      	movs	r3, #39	@ 0x27
 80021b8:	18fb      	adds	r3, r7, r3
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	2380      	movs	r3, #128	@ 0x80
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4013      	ands	r3, r2
 80021c6:	d00c      	beq.n	80021e2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021c8:	6a3b      	ldr	r3, [r7, #32]
 80021ca:	2208      	movs	r2, #8
 80021cc:	4313      	orrs	r3, r2
 80021ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2280      	movs	r2, #128	@ 0x80
 80021d6:	00d2      	lsls	r2, r2, #3
 80021d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021da:	2327      	movs	r3, #39	@ 0x27
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	d00c      	beq.n	8002206 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	2202      	movs	r2, #2
 80021f0:	4313      	orrs	r3, r2
 80021f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2280      	movs	r2, #128	@ 0x80
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021fe:	2327      	movs	r3, #39	@ 0x27
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002206:	2327      	movs	r3, #39	@ 0x27
 8002208:	18fb      	adds	r3, r7, r3
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01d      	beq.n	800224c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff fdb0 	bl	8001d78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	490e      	ldr	r1, [pc, #56]	@ (800225c <I2C_IsErrorOccurred+0x1ec>)
 8002224:	400a      	ands	r2, r1
 8002226:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2241      	movs	r2, #65	@ 0x41
 8002238:	2120      	movs	r1, #32
 800223a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2242      	movs	r2, #66	@ 0x42
 8002240:	2100      	movs	r1, #0
 8002242:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2240      	movs	r2, #64	@ 0x40
 8002248:	2100      	movs	r1, #0
 800224a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800224c:	2327      	movs	r3, #39	@ 0x27
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b00a      	add	sp, #40	@ 0x28
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	fe00e800 	.word	0xfe00e800

08002260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	0008      	movs	r0, r1
 800226a:	0011      	movs	r1, r2
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	240a      	movs	r4, #10
 8002270:	193b      	adds	r3, r7, r4
 8002272:	1c02      	adds	r2, r0, #0
 8002274:	801a      	strh	r2, [r3, #0]
 8002276:	2009      	movs	r0, #9
 8002278:	183b      	adds	r3, r7, r0
 800227a:	1c0a      	adds	r2, r1, #0
 800227c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800227e:	193b      	adds	r3, r7, r4
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	059b      	lsls	r3, r3, #22
 8002284:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002286:	183b      	adds	r3, r7, r0
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	0419      	lsls	r1, r3, #16
 800228c:	23ff      	movs	r3, #255	@ 0xff
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002292:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800229a:	4313      	orrs	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	085b      	lsrs	r3, r3, #1
 80022a0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022aa:	0d51      	lsrs	r1, r2, #21
 80022ac:	2280      	movs	r2, #128	@ 0x80
 80022ae:	00d2      	lsls	r2, r2, #3
 80022b0:	400a      	ands	r2, r1
 80022b2:	4907      	ldr	r1, [pc, #28]	@ (80022d0 <I2C_TransferConfig+0x70>)
 80022b4:	430a      	orrs	r2, r1
 80022b6:	43d2      	mvns	r2, r2
 80022b8:	401a      	ands	r2, r3
 80022ba:	0011      	movs	r1, r2
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b007      	add	sp, #28
 80022cc:	bd90      	pop	{r4, r7, pc}
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	03ff63ff 	.word	0x03ff63ff

080022d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	@ 0x41
 80022e2:	5c9b      	ldrb	r3, [r3, r2]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b20      	cmp	r3, #32
 80022e8:	d138      	bne.n	800235c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2240      	movs	r2, #64	@ 0x40
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d101      	bne.n	80022f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e032      	b.n	800235e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2240      	movs	r2, #64	@ 0x40
 80022fc:	2101      	movs	r1, #1
 80022fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2241      	movs	r2, #65	@ 0x41
 8002304:	2124      	movs	r1, #36	@ 0x24
 8002306:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	438a      	bics	r2, r1
 8002316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4911      	ldr	r1, [pc, #68]	@ (8002368 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002324:	400a      	ands	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2101      	movs	r1, #1
 8002344:	430a      	orrs	r2, r1
 8002346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2241      	movs	r2, #65	@ 0x41
 800234c:	2120      	movs	r1, #32
 800234e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2240      	movs	r2, #64	@ 0x40
 8002354:	2100      	movs	r1, #0
 8002356:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	e000      	b.n	800235e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800235c:	2302      	movs	r3, #2
  }
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			@ (mov r8, r8)
 8002368:	ffffefff 	.word	0xffffefff

0800236c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2241      	movs	r2, #65	@ 0x41
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b20      	cmp	r3, #32
 8002380:	d139      	bne.n	80023f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2240      	movs	r2, #64	@ 0x40
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800238c:	2302      	movs	r3, #2
 800238e:	e033      	b.n	80023f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2240      	movs	r2, #64	@ 0x40
 8002394:	2101      	movs	r1, #1
 8002396:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2241      	movs	r2, #65	@ 0x41
 800239c:	2124      	movs	r1, #36	@ 0x24
 800239e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2101      	movs	r1, #1
 80023ac:	438a      	bics	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a11      	ldr	r2, [pc, #68]	@ (8002400 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2101      	movs	r1, #1
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2241      	movs	r2, #65	@ 0x41
 80023e6:	2120      	movs	r1, #32
 80023e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2240      	movs	r2, #64	@ 0x40
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023f6:	2302      	movs	r3, #2
  }
}
 80023f8:	0018      	movs	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b004      	add	sp, #16
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	fffff0ff 	.word	0xfffff0ff

08002404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	f000 fb6c 	bl	8002af0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002418:	4bc8      	ldr	r3, [pc, #800]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	220c      	movs	r2, #12
 800241e:	4013      	ands	r3, r2
 8002420:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002422:	4bc6      	ldr	r3, [pc, #792]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	2380      	movs	r3, #128	@ 0x80
 8002428:	025b      	lsls	r3, r3, #9
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2201      	movs	r2, #1
 8002434:	4013      	ands	r3, r2
 8002436:	d100      	bne.n	800243a <HAL_RCC_OscConfig+0x36>
 8002438:	e07d      	b.n	8002536 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d007      	beq.n	8002450 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	d112      	bne.n	800246c <HAL_RCC_OscConfig+0x68>
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	025b      	lsls	r3, r3, #9
 800244c:	429a      	cmp	r2, r3
 800244e:	d10d      	bne.n	800246c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002450:	4bba      	ldr	r3, [pc, #744]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	4013      	ands	r3, r2
 800245a:	d100      	bne.n	800245e <HAL_RCC_OscConfig+0x5a>
 800245c:	e06a      	b.n	8002534 <HAL_RCC_OscConfig+0x130>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d166      	bne.n	8002534 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f000 fb42 	bl	8002af0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	429a      	cmp	r2, r3
 8002476:	d107      	bne.n	8002488 <HAL_RCC_OscConfig+0x84>
 8002478:	4bb0      	ldr	r3, [pc, #704]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4baf      	ldr	r3, [pc, #700]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800247e:	2180      	movs	r1, #128	@ 0x80
 8002480:	0249      	lsls	r1, r1, #9
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e027      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	23a0      	movs	r3, #160	@ 0xa0
 800248e:	02db      	lsls	r3, r3, #11
 8002490:	429a      	cmp	r2, r3
 8002492:	d10e      	bne.n	80024b2 <HAL_RCC_OscConfig+0xae>
 8002494:	4ba9      	ldr	r3, [pc, #676]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4ba8      	ldr	r3, [pc, #672]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	02c9      	lsls	r1, r1, #11
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	4ba6      	ldr	r3, [pc, #664]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4ba5      	ldr	r3, [pc, #660]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024a8:	2180      	movs	r1, #128	@ 0x80
 80024aa:	0249      	lsls	r1, r1, #9
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	e012      	b.n	80024d8 <HAL_RCC_OscConfig+0xd4>
 80024b2:	4ba2      	ldr	r3, [pc, #648]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4ba1      	ldr	r3, [pc, #644]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024b8:	49a1      	ldr	r1, [pc, #644]	@ (8002740 <HAL_RCC_OscConfig+0x33c>)
 80024ba:	400a      	ands	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	4b9f      	ldr	r3, [pc, #636]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	025b      	lsls	r3, r3, #9
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4b9b      	ldr	r3, [pc, #620]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b9a      	ldr	r3, [pc, #616]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024d2:	499c      	ldr	r1, [pc, #624]	@ (8002744 <HAL_RCC_OscConfig+0x340>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d014      	beq.n	800250a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd6e 	bl	8000fc0 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ea:	f7fe fd69 	bl	8000fc0 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	@ 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e2f9      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fc:	4b8f      	ldr	r3, [pc, #572]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0xe6>
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fd59 	bl	8000fc0 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002514:	f7fe fd54 	bl	8000fc0 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	@ 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2e4      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002526:	4b85      	ldr	r3, [pc, #532]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	4013      	ands	r3, r2
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x110>
 8002532:	e000      	b.n	8002536 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002534:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2202      	movs	r2, #2
 800253c:	4013      	ands	r3, r2
 800253e:	d100      	bne.n	8002542 <HAL_RCC_OscConfig+0x13e>
 8002540:	e099      	b.n	8002676 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	2220      	movs	r2, #32
 800254c:	4013      	ands	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002550:	4b7a      	ldr	r3, [pc, #488]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b79      	ldr	r3, [pc, #484]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002556:	2120      	movs	r1, #32
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	2220      	movs	r2, #32
 8002560:	4393      	bics	r3, r2
 8002562:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b04      	cmp	r3, #4
 8002568:	d005      	beq.n	8002576 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d13e      	bne.n	80025ee <HAL_RCC_OscConfig+0x1ea>
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d13b      	bne.n	80025ee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002576:	4b71      	ldr	r3, [pc, #452]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2204      	movs	r2, #4
 800257c:	4013      	ands	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_RCC_OscConfig+0x186>
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e2b2      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b6c      	ldr	r3, [pc, #432]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a6e      	ldr	r2, [pc, #440]	@ (8002748 <HAL_RCC_OscConfig+0x344>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	021a      	lsls	r2, r3, #8
 800259a:	4b68      	ldr	r3, [pc, #416]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025a0:	4b66      	ldr	r3, [pc, #408]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2209      	movs	r2, #9
 80025a6:	4393      	bics	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	4b64      	ldr	r3, [pc, #400]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 fbeb 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 80025b6:	0001      	movs	r1, r0
 80025b8:	4b60      	ldr	r3, [pc, #384]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	220f      	movs	r2, #15
 80025c0:	4013      	ands	r3, r2
 80025c2:	4a62      	ldr	r2, [pc, #392]	@ (800274c <HAL_RCC_OscConfig+0x348>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	000a      	movs	r2, r1
 80025c8:	40da      	lsrs	r2, r3
 80025ca:	4b61      	ldr	r3, [pc, #388]	@ (8002750 <HAL_RCC_OscConfig+0x34c>)
 80025cc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80025ce:	4b61      	ldr	r3, [pc, #388]	@ (8002754 <HAL_RCC_OscConfig+0x350>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2513      	movs	r5, #19
 80025d4:	197c      	adds	r4, r7, r5
 80025d6:	0018      	movs	r0, r3
 80025d8:	f7fe fcac 	bl	8000f34 <HAL_InitTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80025e0:	197b      	adds	r3, r7, r5
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d046      	beq.n	8002676 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80025e8:	197b      	adds	r3, r7, r5
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	e280      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d027      	beq.n	8002644 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80025f4:	4b51      	ldr	r3, [pc, #324]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2209      	movs	r2, #9
 80025fa:	4393      	bics	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	4b4f      	ldr	r3, [pc, #316]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe fcdb 	bl	8000fc0 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe fcd6 	bl	8000fc0 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e266      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002622:	4b46      	ldr	r3, [pc, #280]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	d0f1      	beq.n	8002610 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	4a45      	ldr	r2, [pc, #276]	@ (8002748 <HAL_RCC_OscConfig+0x344>)
 8002632:	4013      	ands	r3, r2
 8002634:	0019      	movs	r1, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	021a      	lsls	r2, r3, #8
 800263c:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	e018      	b.n	8002676 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002644:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4b3c      	ldr	r3, [pc, #240]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800264a:	2101      	movs	r1, #1
 800264c:	438a      	bics	r2, r1
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fcb6 	bl	8000fc0 <HAL_GetTick>
 8002654:	0003      	movs	r3, r0
 8002656:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265a:	f7fe fcb1 	bl	8000fc0 <HAL_GetTick>
 800265e:	0002      	movs	r2, r0
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e241      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800266c:	4b33      	ldr	r3, [pc, #204]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2204      	movs	r2, #4
 8002672:	4013      	ands	r3, r2
 8002674:	d1f1      	bne.n	800265a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2210      	movs	r2, #16
 800267c:	4013      	ands	r3, r2
 800267e:	d100      	bne.n	8002682 <HAL_RCC_OscConfig+0x27e>
 8002680:	e0a1      	b.n	80027c6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d140      	bne.n	800270a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002688:	4b2c      	ldr	r3, [pc, #176]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4013      	ands	r3, r2
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_OscConfig+0x29c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d101      	bne.n	80026a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e227      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a0:	4b26      	ldr	r3, [pc, #152]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002758 <HAL_RCC_OscConfig+0x354>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1a      	ldr	r2, [r3, #32]
 80026ae:	4b23      	ldr	r3, [pc, #140]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026b4:	4b21      	ldr	r3, [pc, #132]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	021b      	lsls	r3, r3, #8
 80026ba:	0a19      	lsrs	r1, r3, #8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	061a      	lsls	r2, r3, #24
 80026c2:	4b1e      	ldr	r3, [pc, #120]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	0b5b      	lsrs	r3, r3, #13
 80026ce:	3301      	adds	r3, #1
 80026d0:	2280      	movs	r2, #128	@ 0x80
 80026d2:	0212      	lsls	r2, r2, #8
 80026d4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80026d6:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	210f      	movs	r1, #15
 80026de:	400b      	ands	r3, r1
 80026e0:	491a      	ldr	r1, [pc, #104]	@ (800274c <HAL_RCC_OscConfig+0x348>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_RCC_OscConfig+0x34c>)
 80026e8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80026ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <HAL_RCC_OscConfig+0x350>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2513      	movs	r5, #19
 80026f0:	197c      	adds	r4, r7, r5
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fe fc1e 	bl	8000f34 <HAL_InitTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80026fc:	197b      	adds	r3, r7, r5
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d060      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002704:	197b      	adds	r3, r7, r5
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	e1f2      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03f      	beq.n	8002792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <HAL_RCC_OscConfig+0x338>)
 8002718:	2180      	movs	r1, #128	@ 0x80
 800271a:	0049      	lsls	r1, r1, #1
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fc4e 	bl	8000fc0 <HAL_GetTick>
 8002724:	0003      	movs	r3, r0
 8002726:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002728:	e018      	b.n	800275c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800272a:	f7fe fc49 	bl	8000fc0 <HAL_GetTick>
 800272e:	0002      	movs	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d911      	bls.n	800275c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e1d9      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
 800273c:	40021000 	.word	0x40021000
 8002740:	fffeffff 	.word	0xfffeffff
 8002744:	fffbffff 	.word	0xfffbffff
 8002748:	ffffe0ff 	.word	0xffffe0ff
 800274c:	080031a0 	.word	0x080031a0
 8002750:	20000000 	.word	0x20000000
 8002754:	20000004 	.word	0x20000004
 8002758:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800275c:	4bc9      	ldr	r3, [pc, #804]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d0e0      	beq.n	800272a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002768:	4bc6      	ldr	r3, [pc, #792]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4ac6      	ldr	r2, [pc, #792]	@ (8002a88 <HAL_RCC_OscConfig+0x684>)
 800276e:	4013      	ands	r3, r2
 8002770:	0019      	movs	r1, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1a      	ldr	r2, [r3, #32]
 8002776:	4bc3      	ldr	r3, [pc, #780]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800277c:	4bc1      	ldr	r3, [pc, #772]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	0a19      	lsrs	r1, r3, #8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	061a      	lsls	r2, r3, #24
 800278a:	4bbe      	ldr	r3, [pc, #760]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	e019      	b.n	80027c6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002792:	4bbc      	ldr	r3, [pc, #752]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4bbb      	ldr	r3, [pc, #748]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002798:	49bc      	ldr	r1, [pc, #752]	@ (8002a8c <HAL_RCC_OscConfig+0x688>)
 800279a:	400a      	ands	r2, r1
 800279c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279e:	f7fe fc0f 	bl	8000fc0 <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a8:	f7fe fc0a 	bl	8000fc0 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e19a      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80027ba:	4bb2      	ldr	r3, [pc, #712]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	@ 0x80
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2208      	movs	r2, #8
 80027cc:	4013      	ands	r3, r2
 80027ce:	d036      	beq.n	800283e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d019      	beq.n	800280c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d8:	4baa      	ldr	r3, [pc, #680]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80027da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027dc:	4ba9      	ldr	r3, [pc, #676]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80027de:	2101      	movs	r1, #1
 80027e0:	430a      	orrs	r2, r1
 80027e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e4:	f7fe fbec 	bl	8000fc0 <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ee:	f7fe fbe7 	bl	8000fc0 <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e177      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002800:	4ba0      	ldr	r3, [pc, #640]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002804:	2202      	movs	r2, #2
 8002806:	4013      	ands	r3, r2
 8002808:	d0f1      	beq.n	80027ee <HAL_RCC_OscConfig+0x3ea>
 800280a:	e018      	b.n	800283e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280c:	4b9d      	ldr	r3, [pc, #628]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800280e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002810:	4b9c      	ldr	r3, [pc, #624]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002812:	2101      	movs	r1, #1
 8002814:	438a      	bics	r2, r1
 8002816:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7fe fbd2 	bl	8000fc0 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002822:	f7fe fbcd 	bl	8000fc0 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e15d      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002834:	4b93      	ldr	r3, [pc, #588]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002838:	2202      	movs	r2, #2
 800283a:	4013      	ands	r3, r2
 800283c:	d1f1      	bne.n	8002822 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	4013      	ands	r3, r2
 8002846:	d100      	bne.n	800284a <HAL_RCC_OscConfig+0x446>
 8002848:	e0ae      	b.n	80029a8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2023      	movs	r0, #35	@ 0x23
 800284c:	183b      	adds	r3, r7, r0
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002852:	4b8c      	ldr	r3, [pc, #560]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	055b      	lsls	r3, r3, #21
 800285a:	4013      	ands	r3, r2
 800285c:	d109      	bne.n	8002872 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	4b89      	ldr	r3, [pc, #548]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002860:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002862:	4b88      	ldr	r3, [pc, #544]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002864:	2180      	movs	r1, #128	@ 0x80
 8002866:	0549      	lsls	r1, r1, #21
 8002868:	430a      	orrs	r2, r1
 800286a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800286c:	183b      	adds	r3, r7, r0
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002872:	4b87      	ldr	r3, [pc, #540]	@ (8002a90 <HAL_RCC_OscConfig+0x68c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	2380      	movs	r3, #128	@ 0x80
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4013      	ands	r3, r2
 800287c:	d11a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800287e:	4b84      	ldr	r3, [pc, #528]	@ (8002a90 <HAL_RCC_OscConfig+0x68c>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b83      	ldr	r3, [pc, #524]	@ (8002a90 <HAL_RCC_OscConfig+0x68c>)
 8002884:	2180      	movs	r1, #128	@ 0x80
 8002886:	0049      	lsls	r1, r1, #1
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288c:	f7fe fb98 	bl	8000fc0 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7fe fb93 	bl	8000fc0 <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b64      	cmp	r3, #100	@ 0x64
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e123      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b79      	ldr	r3, [pc, #484]	@ (8002a90 <HAL_RCC_OscConfig+0x68c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	2380      	movs	r3, #128	@ 0x80
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4cc>
 80028c0:	4b70      	ldr	r3, [pc, #448]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80028c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80028c6:	2180      	movs	r1, #128	@ 0x80
 80028c8:	0049      	lsls	r1, r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80028ce:	e031      	b.n	8002934 <HAL_RCC_OscConfig+0x530>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x4ee>
 80028d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80028da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028dc:	4b69      	ldr	r3, [pc, #420]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80028de:	496b      	ldr	r1, [pc, #428]	@ (8002a8c <HAL_RCC_OscConfig+0x688>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80028e4:	4b67      	ldr	r3, [pc, #412]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80028e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028e8:	4b66      	ldr	r3, [pc, #408]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80028ea:	496a      	ldr	r1, [pc, #424]	@ (8002a94 <HAL_RCC_OscConfig+0x690>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80028f0:	e020      	b.n	8002934 <HAL_RCC_OscConfig+0x530>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	23a0      	movs	r3, #160	@ 0xa0
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d10e      	bne.n	800291c <HAL_RCC_OscConfig+0x518>
 80028fe:	4b61      	ldr	r3, [pc, #388]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002902:	4b60      	ldr	r3, [pc, #384]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002904:	2180      	movs	r1, #128	@ 0x80
 8002906:	00c9      	lsls	r1, r1, #3
 8002908:	430a      	orrs	r2, r1
 800290a:	651a      	str	r2, [r3, #80]	@ 0x50
 800290c:	4b5d      	ldr	r3, [pc, #372]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800290e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002910:	4b5c      	ldr	r3, [pc, #368]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002912:	2180      	movs	r1, #128	@ 0x80
 8002914:	0049      	lsls	r1, r1, #1
 8002916:	430a      	orrs	r2, r1
 8002918:	651a      	str	r2, [r3, #80]	@ 0x50
 800291a:	e00b      	b.n	8002934 <HAL_RCC_OscConfig+0x530>
 800291c:	4b59      	ldr	r3, [pc, #356]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800291e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002920:	4b58      	ldr	r3, [pc, #352]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002922:	495a      	ldr	r1, [pc, #360]	@ (8002a8c <HAL_RCC_OscConfig+0x688>)
 8002924:	400a      	ands	r2, r1
 8002926:	651a      	str	r2, [r3, #80]	@ 0x50
 8002928:	4b56      	ldr	r3, [pc, #344]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800292a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800292c:	4b55      	ldr	r3, [pc, #340]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800292e:	4959      	ldr	r1, [pc, #356]	@ (8002a94 <HAL_RCC_OscConfig+0x690>)
 8002930:	400a      	ands	r2, r1
 8002932:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293c:	f7fe fb40 	bl	8000fc0 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002944:	e009      	b.n	800295a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe fb3b 	bl	8000fc0 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	4a51      	ldr	r2, [pc, #324]	@ (8002a98 <HAL_RCC_OscConfig+0x694>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e0ca      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800295a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800295c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800295e:	2380      	movs	r3, #128	@ 0x80
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4013      	ands	r3, r2
 8002964:	d0ef      	beq.n	8002946 <HAL_RCC_OscConfig+0x542>
 8002966:	e014      	b.n	8002992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002968:	f7fe fb2a 	bl	8000fc0 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002970:	e009      	b.n	8002986 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002972:	f7fe fb25 	bl	8000fc0 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4a46      	ldr	r2, [pc, #280]	@ (8002a98 <HAL_RCC_OscConfig+0x694>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0b4      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002986:	4b3f      	ldr	r3, [pc, #252]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002988:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4013      	ands	r3, r2
 8002990:	d1ef      	bne.n	8002972 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002992:	2323      	movs	r3, #35	@ 0x23
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800299c:	4b39      	ldr	r3, [pc, #228]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 800299e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029a0:	4b38      	ldr	r3, [pc, #224]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80029a2:	493e      	ldr	r1, [pc, #248]	@ (8002a9c <HAL_RCC_OscConfig+0x698>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d100      	bne.n	80029b2 <HAL_RCC_OscConfig+0x5ae>
 80029b0:	e09d      	b.n	8002aee <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d100      	bne.n	80029ba <HAL_RCC_OscConfig+0x5b6>
 80029b8:	e076      	b.n	8002aa8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d145      	bne.n	8002a4e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b30      	ldr	r3, [pc, #192]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80029c8:	4935      	ldr	r1, [pc, #212]	@ (8002aa0 <HAL_RCC_OscConfig+0x69c>)
 80029ca:	400a      	ands	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe faf7 	bl	8000fc0 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe faf2 	bl	8000fc0 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e082      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029ea:	4b26      	ldr	r3, [pc, #152]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	@ 0x80
 80029f0:	049b      	lsls	r3, r3, #18
 80029f2:	4013      	ands	r3, r2
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f6:	4b23      	ldr	r3, [pc, #140]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	4a2a      	ldr	r2, [pc, #168]	@ (8002aa4 <HAL_RCC_OscConfig+0x6a0>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	0019      	movs	r1, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	4b1c      	ldr	r3, [pc, #112]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002a12:	430a      	orrs	r2, r1
 8002a14:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a16:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002a1c:	2180      	movs	r1, #128	@ 0x80
 8002a1e:	0449      	lsls	r1, r1, #17
 8002a20:	430a      	orrs	r2, r1
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7fe facc 	bl	8000fc0 <HAL_GetTick>
 8002a28:	0003      	movs	r3, r0
 8002a2a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe fac7 	bl	8000fc0 <HAL_GetTick>
 8002a32:	0002      	movs	r2, r0
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e057      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a40:	4b10      	ldr	r3, [pc, #64]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	049b      	lsls	r3, r3, #18
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x62a>
 8002a4c:	e04f      	b.n	8002aee <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002a54:	4912      	ldr	r1, [pc, #72]	@ (8002aa0 <HAL_RCC_OscConfig+0x69c>)
 8002a56:	400a      	ands	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fab1 	bl	8000fc0 <HAL_GetTick>
 8002a5e:	0003      	movs	r3, r0
 8002a60:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a64:	f7fe faac 	bl	8000fc0 <HAL_GetTick>
 8002a68:	0002      	movs	r2, r0
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e03c      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a76:	4b03      	ldr	r3, [pc, #12]	@ (8002a84 <HAL_RCC_OscConfig+0x680>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	@ 0x80
 8002a7c:	049b      	lsls	r3, r3, #18
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x660>
 8002a82:	e034      	b.n	8002aee <HAL_RCC_OscConfig+0x6ea>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	ffff1fff 	.word	0xffff1fff
 8002a8c:	fffffeff 	.word	0xfffffeff
 8002a90:	40007000 	.word	0x40007000
 8002a94:	fffffbff 	.word	0xfffffbff
 8002a98:	00001388 	.word	0x00001388
 8002a9c:	efffffff 	.word	0xefffffff
 8002aa0:	feffffff 	.word	0xfeffffff
 8002aa4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e01d      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab4:	4b10      	ldr	r3, [pc, #64]	@ (8002af8 <HAL_RCC_OscConfig+0x6f4>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	025b      	lsls	r3, r3, #9
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d10f      	bne.n	8002aea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	23f0      	movs	r3, #240	@ 0xf0
 8002ace:	039b      	lsls	r3, r3, #14
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d107      	bne.n	8002aea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	23c0      	movs	r3, #192	@ 0xc0
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	401a      	ands	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b00a      	add	sp, #40	@ 0x28
 8002af6:	bdb0      	pop	{r4, r5, r7, pc}
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002afc:	b5b0      	push	{r4, r5, r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e128      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b96      	ldr	r3, [pc, #600]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4013      	ands	r3, r2
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d91e      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b93      	ldr	r3, [pc, #588]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4393      	bics	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	4b90      	ldr	r3, [pc, #576]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b30:	f7fe fa46 	bl	8000fc0 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b38:	e009      	b.n	8002b4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3a:	f7fe fa41 	bl	8000fc0 <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	4a8a      	ldr	r2, [pc, #552]	@ (8002d70 <HAL_RCC_ClockConfig+0x274>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e109      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b87      	ldr	r3, [pc, #540]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	4013      	ands	r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1ee      	bne.n	8002b3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2202      	movs	r2, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b66:	4b83      	ldr	r3, [pc, #524]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	22f0      	movs	r2, #240	@ 0xf0
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	0019      	movs	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	4b7f      	ldr	r3, [pc, #508]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002b76:	430a      	orrs	r2, r1
 8002b78:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	4013      	ands	r3, r2
 8002b82:	d100      	bne.n	8002b86 <HAL_RCC_ClockConfig+0x8a>
 8002b84:	e089      	b.n	8002c9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b8e:	4b79      	ldr	r3, [pc, #484]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	029b      	lsls	r3, r3, #10
 8002b96:	4013      	ands	r3, r2
 8002b98:	d120      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0e1      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ba6:	4b73      	ldr	r3, [pc, #460]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	049b      	lsls	r3, r3, #18
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d114      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0d5      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2204      	movs	r2, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d109      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0ca      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bcc:	4b69      	ldr	r3, [pc, #420]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e0c2      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bdc:	4b65      	ldr	r3, [pc, #404]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2203      	movs	r2, #3
 8002be2:	4393      	bics	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	4b62      	ldr	r3, [pc, #392]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7fe f9e6 	bl	8000fc0 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d111      	bne.n	8002c24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe f9dd 	bl	8000fc0 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a58      	ldr	r2, [pc, #352]	@ (8002d70 <HAL_RCC_ClockConfig+0x274>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0a5      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c16:	4b57      	ldr	r3, [pc, #348]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d1ef      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x106>
 8002c22:	e03a      	b.n	8002c9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d111      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c2c:	e009      	b.n	8002c42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2e:	f7fe f9c7 	bl	8000fc0 <HAL_GetTick>
 8002c32:	0002      	movs	r2, r0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	4a4d      	ldr	r2, [pc, #308]	@ (8002d70 <HAL_RCC_ClockConfig+0x274>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e08f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c42:	4b4c      	ldr	r3, [pc, #304]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	220c      	movs	r2, #12
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d1ef      	bne.n	8002c2e <HAL_RCC_ClockConfig+0x132>
 8002c4e:	e024      	b.n	8002c9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d11b      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c58:	e009      	b.n	8002c6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5a:	f7fe f9b1 	bl	8000fc0 <HAL_GetTick>
 8002c5e:	0002      	movs	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	4a42      	ldr	r2, [pc, #264]	@ (8002d70 <HAL_RCC_ClockConfig+0x274>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e079      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c6e:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	220c      	movs	r2, #12
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d1ef      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x15e>
 8002c7a:	e00e      	b.n	8002c9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7c:	f7fe f9a0 	bl	8000fc0 <HAL_GetTick>
 8002c80:	0002      	movs	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	4a3a      	ldr	r2, [pc, #232]	@ (8002d70 <HAL_RCC_ClockConfig+0x274>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e068      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c90:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	220c      	movs	r2, #12
 8002c96:	4013      	ands	r3, r2
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9a:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d21e      	bcs.n	8002ce6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca8:	4b30      	ldr	r3, [pc, #192]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4393      	bics	r3, r2
 8002cb0:	0019      	movs	r1, r3
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cba:	f7fe f981 	bl	8000fc0 <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	e009      	b.n	8002cd8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe f97c 	bl	8000fc0 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <HAL_RCC_ClockConfig+0x274>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e044      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd8:	4b24      	ldr	r3, [pc, #144]	@ (8002d6c <HAL_RCC_ClockConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	4013      	ands	r3, r2
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d1ee      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2204      	movs	r2, #4
 8002cec:	4013      	ands	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a20      	ldr	r2, [pc, #128]	@ (8002d78 <HAL_RCC_ClockConfig+0x27c>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d0e:	4b19      	ldr	r3, [pc, #100]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	4a1a      	ldr	r2, [pc, #104]	@ (8002d7c <HAL_RCC_ClockConfig+0x280>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	00da      	lsls	r2, r3, #3
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002d20:	430a      	orrs	r2, r1
 8002d22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d24:	f000 f832 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
 8002d28:	0001      	movs	r1, r0
 8002d2a:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <HAL_RCC_ClockConfig+0x278>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	220f      	movs	r2, #15
 8002d32:	4013      	ands	r3, r2
 8002d34:	4a12      	ldr	r2, [pc, #72]	@ (8002d80 <HAL_RCC_ClockConfig+0x284>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	000a      	movs	r2, r1
 8002d3a:	40da      	lsrs	r2, r3
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <HAL_RCC_ClockConfig+0x288>)
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d40:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_RCC_ClockConfig+0x28c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	250b      	movs	r5, #11
 8002d46:	197c      	adds	r4, r7, r5
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f7fe f8f3 	bl	8000f34 <HAL_InitTick>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002d52:	197b      	adds	r3, r7, r5
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002d5a:	197b      	adds	r3, r7, r5
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	e000      	b.n	8002d62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	0018      	movs	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bdb0      	pop	{r4, r5, r7, pc}
 8002d6a:	46c0      	nop			@ (mov r8, r8)
 8002d6c:	40022000 	.word	0x40022000
 8002d70:	00001388 	.word	0x00001388
 8002d74:	40021000 	.word	0x40021000
 8002d78:	fffff8ff 	.word	0xfffff8ff
 8002d7c:	ffffc7ff 	.word	0xffffc7ff
 8002d80:	080031a0 	.word	0x080031a0
 8002d84:	20000000 	.word	0x20000000
 8002d88:	20000004 	.word	0x20000004

08002d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d8c:	b5b0      	push	{r4, r5, r7, lr}
 8002d8e:	b08e      	sub	sp, #56	@ 0x38
 8002d90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d92:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d9a:	230c      	movs	r3, #12
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d014      	beq.n	8002dcc <HAL_RCC_GetSysClockFreq+0x40>
 8002da2:	d900      	bls.n	8002da6 <HAL_RCC_GetSysClockFreq+0x1a>
 8002da4:	e07b      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x112>
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d002      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x24>
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dae:	e076      	b.n	8002e9e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002db0:	4b44      	ldr	r3, [pc, #272]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2210      	movs	r2, #16
 8002db6:	4013      	ands	r3, r2
 8002db8:	d002      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002dba:	4b43      	ldr	r3, [pc, #268]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002dbc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002dbe:	e07c      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002dc0:	4b42      	ldr	r3, [pc, #264]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x140>)
 8002dc2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002dc4:	e079      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dc6:	4b42      	ldr	r3, [pc, #264]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002dc8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002dca:	e076      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dce:	0c9a      	lsrs	r2, r3, #18
 8002dd0:	230f      	movs	r3, #15
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x148>)
 8002dd6:	5c9b      	ldrb	r3, [r3, r2]
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	0d9a      	lsrs	r2, r3, #22
 8002dde:	2303      	movs	r3, #3
 8002de0:	4013      	ands	r3, r2
 8002de2:	3301      	adds	r3, #1
 8002de4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002de6:	4b37      	ldr	r3, [pc, #220]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	025b      	lsls	r3, r3, #9
 8002dee:	4013      	ands	r3, r2
 8002df0:	d01a      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	61bb      	str	r3, [r7, #24]
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	4a35      	ldr	r2, [pc, #212]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	69b8      	ldr	r0, [r7, #24]
 8002e00:	69f9      	ldr	r1, [r7, #28]
 8002e02:	f7fd fa67 	bl	80002d4 <__aeabi_lmul>
 8002e06:	0002      	movs	r2, r0
 8002e08:	000b      	movs	r3, r1
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	2300      	movs	r3, #0
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f7fd fa3b 	bl	8000294 <__aeabi_uldivmod>
 8002e1e:	0002      	movs	r2, r0
 8002e20:	000b      	movs	r3, r1
 8002e22:	0013      	movs	r3, r2
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e26:	e037      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e28:	4b26      	ldr	r3, [pc, #152]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d01a      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
 8002e3a:	4a23      	ldr	r2, [pc, #140]	@ (8002ec8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	68b8      	ldr	r0, [r7, #8]
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	f7fd fa47 	bl	80002d4 <__aeabi_lmul>
 8002e46:	0002      	movs	r2, r0
 8002e48:	000b      	movs	r3, r1
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f7fd fa1b 	bl	8000294 <__aeabi_uldivmod>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	000b      	movs	r3, r1
 8002e62:	0013      	movs	r3, r2
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e66:	e017      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	0019      	movs	r1, r3
 8002e70:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_RCC_GetSysClockFreq+0x140>)
 8002e72:	2300      	movs	r3, #0
 8002e74:	f7fd fa2e 	bl	80002d4 <__aeabi_lmul>
 8002e78:	0002      	movs	r2, r0
 8002e7a:	000b      	movs	r3, r1
 8002e7c:	0010      	movs	r0, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e82:	001c      	movs	r4, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	001d      	movs	r5, r3
 8002e88:	0022      	movs	r2, r4
 8002e8a:	002b      	movs	r3, r5
 8002e8c:	f7fd fa02 	bl	8000294 <__aeabi_uldivmod>
 8002e90:	0002      	movs	r2, r0
 8002e92:	000b      	movs	r3, r1
 8002e94:	0013      	movs	r3, r2
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e9a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002e9c:	e00d      	b.n	8002eba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0b5b      	lsrs	r3, r3, #13
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	3301      	adds	r3, #1
 8002eae:	2280      	movs	r2, #128	@ 0x80
 8002eb0:	0212      	lsls	r2, r2, #8
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	0013      	movs	r3, r2
 8002eb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002eb8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b00e      	add	sp, #56	@ 0x38
 8002ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	003d0900 	.word	0x003d0900
 8002ecc:	00f42400 	.word	0x00f42400
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	080031b0 	.word	0x080031b0

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ee0:	2017      	movs	r0, #23
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2220      	movs	r2, #32
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d100      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002ef2:	e0c7      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef4:	4b84      	ldr	r3, [pc, #528]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ef6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	055b      	lsls	r3, r3, #21
 8002efc:	4013      	ands	r3, r2
 8002efe:	d109      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b81      	ldr	r3, [pc, #516]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f04:	4b80      	ldr	r3, [pc, #512]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f06:	2180      	movs	r1, #128	@ 0x80
 8002f08:	0549      	lsls	r1, r1, #21
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002f0e:	183b      	adds	r3, r7, r0
 8002f10:	2201      	movs	r2, #1
 8002f12:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	4b7d      	ldr	r3, [pc, #500]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d11a      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f20:	4b7a      	ldr	r3, [pc, #488]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b79      	ldr	r3, [pc, #484]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002f26:	2180      	movs	r1, #128	@ 0x80
 8002f28:	0049      	lsls	r1, r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe f847 	bl	8000fc0 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	e008      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f38:	f7fe f842 	bl	8000fc0 <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	@ 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0d9      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4a:	4b70      	ldr	r3, [pc, #448]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	@ 0x80
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002f56:	4b6c      	ldr	r3, [pc, #432]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	23c0      	movs	r3, #192	@ 0xc0
 8002f5c:	039b      	lsls	r3, r3, #14
 8002f5e:	4013      	ands	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	23c0      	movs	r3, #192	@ 0xc0
 8002f68:	039b      	lsls	r3, r3, #14
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d013      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	23c0      	movs	r3, #192	@ 0xc0
 8002f78:	029b      	lsls	r3, r3, #10
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	23c0      	movs	r3, #192	@ 0xc0
 8002f7e:	029b      	lsls	r3, r3, #10
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d10a      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002f84:	4b60      	ldr	r3, [pc, #384]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	2380      	movs	r3, #128	@ 0x80
 8002f8a:	029b      	lsls	r3, r3, #10
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0b1      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f9e:	23c0      	movs	r3, #192	@ 0xc0
 8002fa0:	029b      	lsls	r3, r3, #10
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03b      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	23c0      	movs	r3, #192	@ 0xc0
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d033      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d02e      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002fc6:	4b50      	ldr	r3, [pc, #320]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fca:	4a51      	ldr	r2, [pc, #324]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fd6:	2180      	movs	r1, #128	@ 0x80
 8002fd8:	0309      	lsls	r1, r1, #12
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fde:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fe0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fe2:	4b49      	ldr	r3, [pc, #292]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fe4:	494b      	ldr	r1, [pc, #300]	@ (8003114 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002fe6:	400a      	ands	r2, r1
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002fea:	4b47      	ldr	r3, [pc, #284]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	2380      	movs	r3, #128	@ 0x80
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	d014      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffa:	f7fd ffe1 	bl	8000fc0 <HAL_GetTick>
 8002ffe:	0003      	movs	r3, r0
 8003000:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003002:	e009      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fd ffdc 	bl	8000fc0 <HAL_GetTick>
 8003008:	0002      	movs	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	4a42      	ldr	r2, [pc, #264]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e072      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003018:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800301a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800301c:	2380      	movs	r3, #128	@ 0x80
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4013      	ands	r3, r2
 8003022:	d0ef      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2220      	movs	r2, #32
 800302a:	4013      	ands	r3, r2
 800302c:	d01f      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	23c0      	movs	r3, #192	@ 0xc0
 8003034:	029b      	lsls	r3, r3, #10
 8003036:	401a      	ands	r2, r3
 8003038:	23c0      	movs	r3, #192	@ 0xc0
 800303a:	029b      	lsls	r3, r3, #10
 800303c:	429a      	cmp	r2, r3
 800303e:	d10c      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8003040:	4b31      	ldr	r3, [pc, #196]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a35      	ldr	r2, [pc, #212]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003046:	4013      	ands	r3, r2
 8003048:	0019      	movs	r1, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	23c0      	movs	r3, #192	@ 0xc0
 8003050:	039b      	lsls	r3, r3, #14
 8003052:	401a      	ands	r2, r3
 8003054:	4b2c      	ldr	r3, [pc, #176]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003056:	430a      	orrs	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800305c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	23c0      	movs	r3, #192	@ 0xc0
 8003064:	029b      	lsls	r3, r3, #10
 8003066:	401a      	ands	r2, r3
 8003068:	4b27      	ldr	r3, [pc, #156]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800306a:	430a      	orrs	r2, r1
 800306c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800306e:	2317      	movs	r3, #23
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b23      	ldr	r3, [pc, #140]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800307a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800307c:	4b22      	ldr	r3, [pc, #136]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800307e:	4928      	ldr	r1, [pc, #160]	@ (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003080:	400a      	ands	r2, r1
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2202      	movs	r2, #2
 800308a:	4013      	ands	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800308e:	4b1e      	ldr	r3, [pc, #120]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003092:	220c      	movs	r2, #12
 8003094:	4393      	bics	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	4b1a      	ldr	r3, [pc, #104]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800309e:	430a      	orrs	r2, r1
 80030a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2204      	movs	r2, #4
 80030a8:	4013      	ands	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ac:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003124 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	4b13      	ldr	r3, [pc, #76]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030bc:	430a      	orrs	r2, r1
 80030be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2208      	movs	r2, #8
 80030c6:	4013      	ands	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	4013      	ands	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80030e8:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ec:	4a0f      	ldr	r2, [pc, #60]	@ (800312c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80030f8:	430a      	orrs	r2, r1
 80030fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b006      	add	sp, #24
 8003104:	bd80      	pop	{r7, pc}
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	40021000 	.word	0x40021000
 800310c:	40007000 	.word	0x40007000
 8003110:	fffcffff 	.word	0xfffcffff
 8003114:	fff7ffff 	.word	0xfff7ffff
 8003118:	00001388 	.word	0x00001388
 800311c:	ffcfffff 	.word	0xffcfffff
 8003120:	efffffff 	.word	0xefffffff
 8003124:	fffff3ff 	.word	0xfffff3ff
 8003128:	ffffcfff 	.word	0xffffcfff
 800312c:	fff3ffff 	.word	0xfff3ffff

08003130 <memset>:
 8003130:	0003      	movs	r3, r0
 8003132:	1882      	adds	r2, r0, r2
 8003134:	4293      	cmp	r3, r2
 8003136:	d100      	bne.n	800313a <memset+0xa>
 8003138:	4770      	bx	lr
 800313a:	7019      	strb	r1, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	e7f9      	b.n	8003134 <memset+0x4>

08003140 <__libc_init_array>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	2600      	movs	r6, #0
 8003144:	4c0c      	ldr	r4, [pc, #48]	@ (8003178 <__libc_init_array+0x38>)
 8003146:	4d0d      	ldr	r5, [pc, #52]	@ (800317c <__libc_init_array+0x3c>)
 8003148:	1b64      	subs	r4, r4, r5
 800314a:	10a4      	asrs	r4, r4, #2
 800314c:	42a6      	cmp	r6, r4
 800314e:	d109      	bne.n	8003164 <__libc_init_array+0x24>
 8003150:	2600      	movs	r6, #0
 8003152:	f000 f819 	bl	8003188 <_init>
 8003156:	4c0a      	ldr	r4, [pc, #40]	@ (8003180 <__libc_init_array+0x40>)
 8003158:	4d0a      	ldr	r5, [pc, #40]	@ (8003184 <__libc_init_array+0x44>)
 800315a:	1b64      	subs	r4, r4, r5
 800315c:	10a4      	asrs	r4, r4, #2
 800315e:	42a6      	cmp	r6, r4
 8003160:	d105      	bne.n	800316e <__libc_init_array+0x2e>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	00b3      	lsls	r3, r6, #2
 8003166:	58eb      	ldr	r3, [r5, r3]
 8003168:	4798      	blx	r3
 800316a:	3601      	adds	r6, #1
 800316c:	e7ee      	b.n	800314c <__libc_init_array+0xc>
 800316e:	00b3      	lsls	r3, r6, #2
 8003170:	58eb      	ldr	r3, [r5, r3]
 8003172:	4798      	blx	r3
 8003174:	3601      	adds	r6, #1
 8003176:	e7f2      	b.n	800315e <__libc_init_array+0x1e>
 8003178:	080031c4 	.word	0x080031c4
 800317c:	080031c4 	.word	0x080031c4
 8003180:	080031c8 	.word	0x080031c8
 8003184:	080031c4 	.word	0x080031c4

08003188 <_init>:
 8003188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800318e:	bc08      	pop	{r3}
 8003190:	469e      	mov	lr, r3
 8003192:	4770      	bx	lr

08003194 <_fini>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	46c0      	nop			@ (mov r8, r8)
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr
